AttachSpec("spec");
directory := "/Users/mjmusty/Dropbox/github/SolvableDessins/SolvableDB";
ChangeDirectory(directory);

/*
degree 2
*/

// 2T1
d2 := [Sym(2) | (1,2),(1,2),Id(Sym(2))];

/*
degree 4
*/

// 4T1_1
s4t1_1 := SolvableDBAccessEntry("4T1-[4,4,1]-4-4-1111-g0.m");
p4t1_1 := s4t1_1`SolvableDBPointedPassport;
d4t1_1 := p4t1_1[1];

// 4T1_2
s4t1_2 := SolvableDBAccessEntry("4T1-[4,4,2]-4-4-22-g1.m");
p4t1_2 := s4t1_2`SolvableDBPointedPassport;
d4t1_2 := p4t1_2[1];

// 4T2
s4t2 := SolvableDBAccessEntry("4T2-[2,2,2]-22-22-22-g0.m");
p4t2 := s4t2`SolvableDBPointedPassport;
d4t2 := p4t2[1];

/*
degree 8
*/

// 8T1_1
s8t1_1 := SolvableDBAccessEntry("8T1-[8,8,1]-8-8-11111111-g0.m");
p8t1_1 := s8t1_1`SolvableDBPointedPassport;
d8t1_1 := p8t1_1[1];

// 8T1_2
s8t1_2 := SolvableDBAccessEntry("8T1-[8,8,2]-8-8-2222-g2.m");
p8t1_2 := s8t1_2`SolvableDBPointedPassport;
d8t1_2 := p8t1_2[1];

// 8T1_3
s8t1_3 := SolvableDBAccessEntry("8T1-[8,8,4]-8-8-44-g3.m");
p8t1_3 := s8t1_3`SolvableDBPointedPassport;
d8t1_3 := p8t1_3[1];

// 8T2
s8t2 := SolvableDBAccessEntry("8T2-[4,4,2]-44-44-2222-g1.m");
p8t2 := s8t2`SolvableDBPointedPassport;
d8t2 := p8t2[1];

// 8T4
s8t4 := SolvableDBAccessEntry("8T4-[2,2,4]-2222-2222-44-g0.m");
p8t4 := s8t4`SolvableDBPointedPassport;
d8t4 := p8t4[1];

// 8T5
s8t5 := SolvableDBAccessEntry("8T5-[4,4,4]-44-44-44-g2.m");
p8t5 := s8t5`SolvableDBPointedPassport;
d8t5 := p8t5[1];

/*
degree 16
*/

// above 8T1_1
  s16t1_1 := SolvableDBAccessEntry("16T1-[16,16,1]-16-16-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1-g0.m");
  p16t1_1 := s16t1_1`SolvableDBPointedPassport;
  d16t1_1 := p16t1_1[1];

  s16t1_2 := SolvableDBAccessEntry("16T1-[16,16,2]-16-16-2,2,2,2,2,2,2,2-g4.m");
  p16t1_2 := s16t1_2`SolvableDBPointedPassport;
  d16t1_2 := p16t1_2[1];

  s16t5_1 := SolvableDBAccessEntry("16T5-[8,8,2]-8,8-8,8-2,2,2,2,2,2,2,2-g3.m");
  p16t5_1 := s16t5_1`SolvableDBPointedPassport;
  d16t5_1 := p16t5_1[1];

// TODO above 8T1_2
  // 16T5_1 IsWeaklyIso but not the same triple
  // 16T1_3
  s16t1_3 := SolvableDBAccessEntry("16T1-[16,16,4]-16-16-4,4,4,4-g6.m");
  p16t1_3 := s16t1_3`SolvableDBPointedPassport;
  d16t1_3 := p16t1_3[1];

// TODO above 8T1_3 (size 2 passport)
  // 16T5_2 arises from both triples of this size 2 passport the copies are WeaklyIso
  s16t5_2 := SolvableDBAccessEntry("16T5-[8,8,4]-8,8-8,8-4,4,4,4-g5.m");
  p16t5_2 := s16t5_2`SolvableDBPointedPassport;
  d16t5_2 := p16t5_2[1];
  // 16T1_4 arises from both triples of this size 2 passport...but 16T1_4 is size 4 and we are only getting 3 total

// TODO above 8T2
  // 16T10 unramified...how to eliminate these...
  // 16T4 seems fine
  s16t4 := SolvableDBAccessEntry("16T4-[4,4,4]-4,4,4,4-4,4,4,4-4,4,4,4-g3.m");
  p16t4 := s16t4`SolvableDBPointedPassport;
  d16t4 := p16t4[1];
  // 16T8 size 3, but only 1 arising this way
  // 16T5_1 weakly iso
  // 16T5_2 weakly iso
  // 16T6_2
  s16t6_2 := SolvableDBAccessEntry("16T6-[8,8,4]-8,8-8,8-4,4,4,4-g5.m");
  p16t6_2 := s16t6_2`SolvableDBPointedPassport;
  d16t6_2 := p16t6_2[1];
  // 16T6_1
  s16t6_1 := SolvableDBAccessEntry("16T6-[8,8,2]-8,8-8,8-2,2,2,2,2,2,2,2-g3.m");
  p16t6_1 := s16t6_1`SolvableDBPointedPassport;
  d16t6_1 := p16t6_1[1];

// TODO above 8T4
  // 16T13
  s16t13 := SolvableDBAccessEntry("16T13-[2,2,8]-2,2,2,2,2,2,2,2-2,2,2,2,2,2,2,2-8,8-g0.m");
  p16t13 := s16t13`SolvableDBPointedPassport;
  d16t13 := p16t13[1];
  // 16T10
  s16t10 := SolvableDBAccessEntry("16T10-[2,4,4]-2,2,2,2,2,2,2,2-4,4,4,4-4,4,4,4-g1.m");
  p16t10 := s16t10`SolvableDBPointedPassport;
  d16t10 := p16t10[1];
  // 16T12
  s16t12 := SolvableDBAccessEntry("16T12-[2,4,8]-2,2,2,2,2,2,2,2-4,4,4,4-8,8-g2.m");
  p16t12 := s16t12`SolvableDBPointedPassport;
  d16t12 := p16t12[1];
  // 16T8 size 3, only 1 arising this way (2/3 including above 8T2)
  // 16T14
  s16t14 := SolvableDBAccessEntry("16T14-[4,4,8]-4,4,4,4-4,4,4,4-8,8-g4.m");
  p16t14 := s16t14`SolvableDBPointedPassport;
  d16t14 := p16t14[1];

// TODO above 8T5
  // 16T8 size 3, only 1 arising this way
  // so put all 3 together right? nope...they are all
  c5 := PossibleGaloisCoveringPermutationTriples(d8t5);
  s5 := c5[1];
  c2 := PossibleGaloisCoveringPermutationTriples(d8t2);
  s2 := c2[3];
  c4 := PossibleGaloisCoveringPermutationTriples(d8t4);
  s4 := c4[4];
