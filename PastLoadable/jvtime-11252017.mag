load "catalog.mag";
load "16T14-4,4,8-g4-path3.m";

sigma := s`SolvableDBGaloisOrbit[1];
X := s`SolvableDBBelyiCurve;
Z := ProjectiveClosure(X);
KX := FunctionField(X);
phi := s`SolvableDBBelyiMap;
kappa := CanonicalMap(X);
C := CanonicalImage(X, kappa);

below := sigma;
G := sub<Sym(16)|below>;
extensions := Extensions(below);
extension := extensions[2];
E, iota, pi := Explode(extension);
A := Image(iota);
tau := A.1;
above := [ below[i] @@ pi : i in [1..3] ];
blocks1 := PermutationToBlocks(A.1);
blocks2 := GSet(E, blocks1);

a1, a2, a3 := Explode(above);
covers := [above];
Append(~covers, [tau*a1, a2, a3]);
Append(~covers, [a1, tau*a2, a3]);
Append(~covers, [a1, a2, tau*a3]);
Append(~covers, [a1, tau*a2, tau*a3]);
Append(~covers, [tau*a1, a2, tau*a3]);
Append(~covers, [tau*a1, tau*a2, a3]);
Append(~covers, [tau*a1, tau*a2, tau*a3]);
if covers[1][3]*covers[1][2]*covers[1][1] ne Parent(covers[1][1])!1 then
  correct := covers[2];
end if;
