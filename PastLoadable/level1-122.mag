/*
Front Matter
*/
  // assumes current directory = repo directory
  dir := GetCurrentDirectory();
  parentdir := Pipe(Sprintf("basename 'dirname %o'", dir), "");
  if parentdir eq "SolvableDessins\n" then
    repo := dir;
  else
    error "make sure your working directory is /SolvableDessins";
  end if;
  // directories in SolvableDessins repo
  code := repo cat "/Code/";
  db := repo cat "/SolvableDB/";
  profiler := repo cat "/Profiler/";
  examples := repo cat "/Examples/";
  // spec files
  AttachSpec(code cat "spec");
  AttachSpec("~/Dropbox/belyi/Code/spec");
/*
MAIN
*/
j := 1; // which 2T1 you want?
names := SolvableDBFilenames(2);
objs := [];
for i in [1..#names] do
  s := SolvableDBAccessEntry(names[i]);
  pass := s`SolvableDBPassport;
  Append(~objs, SolvableDBExample(pass));
end for;
s := objs[j];
// curve base field
  F := Rationals();
// level 0 Curve FF
  PX0<x0> := PolynomialRing(F, 1);
  AA0<x0> := AffineSpace(PX0);
  I0 := ideal< PX0 | >;
  X0<x0> := Curve(AA0);
  KX0<x0> := FunctionField(X0);
  phi0 := KX0.1;
// level 0 RiemannRoch
  D0 := -Divisor(KX0.1-1);
  LD0, mpLD0toKX0 := RiemannRochSpace(D0);
  assert Dimension(LD0) eq 1;
  f0 := mpLD0toKX0(LD0.1);
  denom0 := Denominator(f0);
  numer0 := Numerator(f0);
  assert Parent(denom0) eq Parent(numer0);
  AffAlg0 := Parent(denom0);
// level 1 Curve FF
  PX1<x0, x1> := PolynomialRing(F, 2);
  AA1<x0, x1> := AffineSpace(PX1);
  mpPX0toPX1 := hom< PX0 -> PX1 | PX1.1 >;
  mpAffAlg0toPX1 := hom< AffAlg0 -> PX1 | PX1.1 >;
  I1 := ideal< PX1 | mpAffAlg0toPX1(denom0)*PX1.2^2 - mpAffAlg0toPX1(numer0) >;
  X1<x0, x1> := Curve(AA1, I1);
  KX1<x0, x1> := FunctionField(X1);
  phi1 := KX1.1;
// sanity
  sigma := s`SolvableDBPassport[1];
  BelyiMapSanityCheck(sigma, X1, phi1);
// write
  F0 := Rationals();
  F1 := Rationals();
  s`SolvableDBCurveBaseFieldList := [* F0, F1 *];
  s`SolvableDBCurvePolynomialRingList := [* PX0, PX1 *];
  s`SolvableDBCurveAmbientList := [* AA0, AA1 *];
  s`SolvableDBCurveIdealList := [* I0, I1 *];
  s`SolvableDBCurveList := [* X0, X1 *];
  s`SolvableDBBelyiCurve := X1;
  s`SolvableDBBelyiMap := phi1;
