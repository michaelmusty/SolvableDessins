// under transitive db limit only :(
// TODO to go above trasitive db limit need to number iso classes somehow...
intrinsic SolvableJiggleName(s::SolvableDBObject) -> MonStgElt
  {name for jiggle graph}
  d := s`SolvableDBDegree;
  G := s`SolvableDBMonodromyGroup;
  assert IsTransitive(G);
  g, d := TransitiveGroupIdentification(G);
  a,b,c := Explode(s`SolvableDBABC);
  genus := s`SolvableDBGenus;
  path := s`SolvableDBPathNumber;
  name := Sprintf("%oT%o-%o-%o-%o-path%o", d, g, a, b, c, path);
  return name;
end intrinsic;

intrinsic SolvableGenerateCatalogEntry(s::SolvableDBObject) -> MonStgElt
  {line for catalog.mag}
  d := s`SolvableDBDegree;
  G := s`SolvableDBMonodromyGroup;
  assert IsTransitive(G);
  g, d := TransitiveGroupIdentification(G);
  a,b,c := Explode(s`SolvableDBABC);
  genus := s`SolvableDBGenus;
  path := s`SolvableDBPathNumber;
  sigma := s`SolvableDBGaloisOrbit[1];
  str := "";
  str *:= Sprintf("d%ot%o_%o_%o_%o_path%o", d, g, a, b, c, path);
  str *:= Sprintf(" := SolvableDBAccessEntry(\"%o-path%o.m\");", SolvableDBGenerateName(sigma), path);
  return str;
end intrinsic;

intrinsic SolvableJiggleNode(s::SolvableDBObject) -> MonStgElt
  {vis.js jiggle node}
  d := s`SolvableDBDegree;
  G := s`SolvableDBMonodromyGroup;
  assert IsTransitive(G);
  g, d := TransitiveGroupIdentification(G);
  a,b,c := Explode(s`SolvableDBABC);
  genus := s`SolvableDBGenus;
  sigma := s`SolvableDBGaloisOrbit[1];
  path := s`SolvableDBPathNumber;
  str := "";
  str *:= Sprintf("nodes.push({id: '%o', label: '%o', group: 'size1', title: '%o-path%o'});", SolvableJiggleName(s), SolvableJiggleName(s), SolvableDBGenerateName(sigma), path);
  return str;
end intrinsic;

intrinsic SolvableJiggleEdges(s::SolvableDBObject) -> MonStgElt
  {vis.js jiggle edges ->s}
  // edges.push({from: '4T1-1-4-4-path1', to: '2T1-1-2-2-path1'});
  if assigned s`SolvableDBParents then
    d := s`SolvableDBDegree;
    G := s`SolvableDBMonodromyGroup;
    assert IsTransitive(G);
    g, d := TransitiveGroupIdentification(G);
    a,b,c := Explode(s`SolvableDBABC);
    genus := s`SolvableDBGenus;
    sigma := s`SolvableDBGaloisOrbit[1];
    path := s`SolvableDBPathNumber;
    str := "";
    for parent_name in s`SolvableDBParents do
      parent := SolvableDBAccessEntry(parent_name cat ".m");
      str *:= Sprintf("edges.push({from: '%o', to: '%o'});\n", SolvableJiggleName(parent), SolvableJiggleName(s));
    end for;
    return str;
  else
    error "parents not generated!";
  end if;
end intrinsic;
