s := SolvableDBInitialize();

/*
Custom printing for Belyi curve and map
*/

/* Belyi curve */
K<nu> := NumberField(Polynomial([RationalField() | 1, 0, 0, 0, 1]));
P<[x]> := PolynomialRing(K, 3);
I<[x]> := ideal< P | [
x[1]^2 + 1/12*(nu^3 + 4*nu^2 + 5*nu + 3)*x[2]^7*x[3]^2 + 1/144*(4*nu^3 - 3*nu^2 - 8*nu - 8)*x[2]^6*x[3]^4 + 1/12*(nu^3 + 6*nu^2 + 7*nu + 4)*x[2]^6*x[3]^2 + 1/2*x[2]^6 + 1/144*(-nu^3 - 20*nu^2 - 27*nu - 20)*x[2]^5*x[3]^4 + 1/12*(-3*nu^3 + 2*nu^2 + 5*nu + 7)*x[2]^5*x[3]^2 + 1/2*(-nu^3 - nu)*x[2]^5 + 1/72*(-12*nu^3 - 19*nu^2 - 16*nu - 2)*x[2]^4*x[3]^4 + 1/12*(-5*nu^3 + 2*nu^2 + 9*nu + 8)*x[2]^4*x[3]^2 + 1/72*(-19*nu^3 - 16*nu^2 - 2*nu + 12)*x[2]^3*x[3]^4 + 1/12*(-3*nu^3 - 2*nu^2 + nu + 5)*x[2]^3*x[3]^2 - nu^3*x[2]^3 + 1/144*(-28*nu^3 - 7*nu^2 + 16*nu + 30)*x[2]^2*x[3]^4 + 1/12*(-7*nu^3 - 2*nu^2 + 3*nu + 4)*x[2]^2*x[3]^2 + 1/2*(-2*nu^2 - 1)*x[2]^2 + 1/144*(-5*nu^3 + 4*nu^2 + 11*nu + 12)*x[2]*x[3]^4 + 1/12*(nu^3 + nu + 1)*x[2]*x[3]^2 + 1/2*(-nu^3 + nu)*x[2] + 1/12*(-nu^3 + 2*nu^2 + nu)*x[3]^2 - nu^2,
x[1]*x[2] + 1/72576*(-110*nu^3 - 965*nu^2 - 1252*nu - 807)*x[1]*x[3]^8 + 1/6048*(-519*nu^3 - 154*nu^2 + 305*nu + 589)*x[1]*x[3]^6 + 1/1008*(28*nu^3 - 61*nu^2 - 108*nu - 79)*x[1]*x[3]^4 + 1/28*(-7*nu^3 - 11*nu^2 - 17*nu - 4)*x[1]*x[3]^2 - nu*x[1] + 1/290304*(1949*nu^3 - 268*nu^2 - 2327*nu - 3024)*x[2]^7*x[3]^8 + 1/24192*(2569*nu^3 - 2462*nu^2 - 6046*nu - 6090)*x[2]^7*x[3]^6 + 1/4032*(3771*nu^3 + 3604*nu^2 + 1339*nu - 1714)*x[2]^7*x[3]^4 + 1/336*(280*nu^3 + 98*nu^2 - 147*nu - 292)*x[2]^7*x[3]^2 + 1/3483648*(-5083*nu^3 - 2646*nu^2 + 1343*nu + 4544)*x[2]^6*x[3]^10 + 1/290304*(-8650*nu^3 + 6298*nu^2 + 17559*nu + 18538)*x[2]^6*x[3]^8 + 1/24192*(-2359*nu^3 - 2458*nu^2 - 1112*nu + 888)*x[2]^6*x[3]^6 + 1/448*(42*nu^3 + 193*nu^2 + 228*nu + 133)*x[2]^6*x[3]^4 + 1/672*(-243*nu^3 + 218*nu^2 + 569*nu + 604)*x[2]^6*x[3]^2 + 1/56*(18*nu^3 + 47*nu^2 - nu - 5)*x[2]^6 + 1/3483648*(4834*nu^3 - 2453*nu^2 - 8308*nu - 9297)*x[2]^5*x[3]^10 + 1/290304*(-3186*nu^3 + 11831*nu^2 + 19928*nu + 16330)*x[2]^5*x[3]^8 + 1/24192*(-599*nu^3 - 2001*nu^2 - 2231*nu - 1160)*x[2]^5*x[3]^6 + 1/4032*(-2469*nu^3 + 2438*nu^2 + 5933*nu + 6010)*x[2]^5*x[3]^4 + 1/672*(-800*nu^3 - 17*nu^2 + 578*nu + 957)*x[2]^5*x[3]^2 + 1/56*(-103*nu^3 - 27*nu^2 + 5*nu + 46)*x[2]^5 + 1/1741824*(-583*nu^3 - 9257*nu^2 - 12510*nu - 8429)*x[2]^4*x[3]^10 + 1/290304*(13273*nu^3 + 22317*nu^2 + 18247*nu + 3523)*x[2]^4*x[3]^8 + 1/24192*(-4186*nu^3 - 4162*nu^2 - 1736*nu + 1737)*x[2]^4*x[3]^6 + 1/4032*(-334*nu^3 - 509*nu^2 - 390*nu - 125)*x[2]^4*x[3]^4 + 1/336*(275*nu^3 + 36*nu^2 - 208*nu - 307)*x[2]^4*x[3]^2 + 1/56*(45*nu^3 + 42*nu^2 - 47*nu - 108)*x[2]^4 + 1/1741824*(-9257*nu^3 - 12510*nu^2 - 8429*nu + 583)*x[2]^3*x[3]^10 + 1/290304*(13363*nu^3 + 3331*nu^2 - 8611*nu - 15525)*x[2]^3*x[3]^8 + 1/24192*(3382*nu^3 + 11836*nu^2 + 13403*nu + 7110)*x[2]^3*x[3]^6 + 1/4032*(-1709*nu^3 - 810*nu^2 + 487*nu + 1642)*x[2]^3*x[3]^4 + 1/336*(-894*nu^3 - 278*nu^2 + 451*nu + 953)*x[2]^3*x[3]^2 + 1/56*(-98*nu^3 - 9*nu^2 + 108*nu + 45)*x[2]^3 + 1/3483648*(-30103*nu^3 - 19504*nu^2 + 2509*nu + 23058)*x[2]^2*x[3]^10 + 1/290304*(-16031*nu^3 - 18200*nu^2 - 9730*nu + 4422)*x[2]^2*x[3]^8 + 1/24192*(5099*nu^3 + 2407*nu^2 - 1698*nu - 4871)*x[2]^2*x[3]^6 + 1/4032*(-2598*nu^3 - 5393*nu^2 - 4910*nu - 1741)*x[2]^2*x[3]^4 + 1/672*(629*nu^3 - 322*nu^2 - 857*nu - 1044)*x[2]^2*x[3]^2 + 1/56*(27*nu^3 - 61*nu^2 - 46*nu - 103)*x[2]^2 + 1/387072*(-1336*nu^3 - 143*nu^2 + 1134*nu + 1747)*x[2]*x[3]^10 + 1/290304*(-13330*nu^3 - 5678*nu^2 + 5286*nu + 13171)*x[2]*x[3]^8 + 1/24192*(-1526*nu^3 - 2701*nu^2 - 2304*nu - 550)*x[2]*x[3]^6 + 1/1344*(81*nu^3 - 490*nu^2 - 781*nu - 632)*x[2]*x[3]^4 + 1/672*(-316*nu^3 - 175*nu^2 + 142*nu + 309)*x[2]*x[3]^2 + 1/56*(5*nu^3 + 18*nu^2 + 103*nu - 1)*x[2] + 1/290304*(3464*nu^3 + 5809*nu^2 + 4740*nu + 901)*x[3]^8 + 1/24192*(-228*nu^3 - 965*nu^2 - 1154*nu - 676)*x[3]^6 + 1/4032*(-352*nu^3 + 17*nu^2 + 346*nu + 429)*x[3]^4 + 1/336*(-110*nu^3 - 144*nu^2 - 20*nu + 31)*x[3]^2 - nu^2,
x[1]*x[3]^10 + (16*nu^2 - 16*nu + 8)*x[1]*x[3]^8 + (80*nu^3 + 64*nu^2 - 176*nu + 192)*x[1]*x[3]^6 + (-2048*nu^3 + 640*nu^2 + 1152*nu - 2240)*x[1]*x[3]^4 + (1024*nu^3 + 6144*nu^2 - 9728*nu + 7616)*x[1]*x[3]^2 + 1/4*(-nu^3 - nu^2 + 1)*x[2]^7*x[3]^10 + (-6*nu^3 - 3*nu^2 + 9)*x[2]^7*x[3]^8 + (24*nu^3 - 36*nu^2 - 48*nu + 12)*x[2]^7*x[3]^6 + (-256*nu^3 + 184*nu^2 + 16*nu - 168)*x[2]^7*x[3]^4 + (784*nu^3 - 112*nu^2 - 640*nu + 1008)*x[2]^7*x[3]^2 + 1/48*(2*nu^3 + 2*nu^2 + nu)*x[2]^6*x[3]^12 + 1/4*(7*nu^3 + 5*nu^2 - 3*nu - 6)*x[2]^6*x[3]^10 + 1/2*(5*nu^3 + 6*nu^2 + 2*nu + 16)*x[2]^6*x[3]^8 + (-64*nu^3 + 40*nu^2 - 8*nu - 72)*x[2]^6*x[3]^6 + (296*nu^3 + 576*nu^2 - 1036*nu + 904)*x[2]^6*x[3]^4 + (-3024*nu^3 - 1552*nu^2 + 5200*nu - 5792)*x[2]^6*x[3]^2 + (-1312*nu^3 + 15360*nu^2 - 20416*nu + 13504)*x[2]^6 + 1/48*(-4*nu^3 - 3*nu^2 + 2*nu + 2)*x[2]^5*x[3]^12 + 1/4*(10*nu^3 - nu^2 - 3*nu - 7)*x[2]^5*x[3]^10 + 1/2*(-22*nu^3 + 6*nu^2 + 20*nu - 11)*x[2]^5*x[3]^8 + (-60*nu^3 + 296*nu^2 - 308*nu + 88)*x[2]^5*x[3]^6 + (-312*nu^3 - 812*nu^2 + 1568*nu - 1288)*x[2]^5*x[3]^4 + (-4224*nu^3 + 2800*nu^2 + 272*nu - 3184)*x[2]^5*x[3]^2 + (-15360*nu^3 + 20416*nu^2 - 13504*nu - 1312)*x[2]^5 + 1/48*(-9*nu^3 + 2*nu^2 + 5*nu + 10)*x[2]^4*x[3]^12 + 1/4*(-3*nu^3 - 3*nu^2 - 7*nu - 14)*x[2]^4*x[3]^10 + 1/2*(-13*nu^3 + 42*nu^2 - 7*nu + 10)*x[2]^4*x[3]^8 + (180*nu^3 - 300*nu^2 + 228*nu - 24)*x[2]^4*x[3]^6 + (-1908*nu^3 + 2536*nu^2 - 1756*nu - 88)*x[2]^4*x[3]^4 + (4912*nu^3 - 10224*nu^2 + 9520*nu - 3232)*x[2]^4*x[3]^2 + (-21728*nu^3 + 28864*nu^2 - 19104*nu - 1856)*x[2]^4 + 1/48*(2*nu^3 + 5*nu^2 + 10*nu + 9)*x[2]^3*x[3]^12 + 1/4*(-3*nu^3 - 5*nu^2 - 8*nu + 9)*x[2]^3*x[3]^10 + 1/2*(54*nu^3 - 15*nu^2 - 42*nu - 3)*x[2]^3*x[3]^8 + (-288*nu^3 + 252*nu^2 - 180)*x[2]^3*x[3]^6 + (248*nu^3 + 300*nu^2 - 520*nu + 508)*x[2]^3*x[3]^4 + (3568*nu^3 - 6768*nu^2 + 6016*nu - 1744)*x[2]^3*x[3]^2 + (-28864*nu^3 + 19104*nu^2 + 1856*nu - 21728)*x[2]^3 + 1/48*(7*nu^3 + 12*nu^2 + 10*nu - 2)*x[2]^2*x[3]^12 + 1/4*(nu^3 - nu^2 + 15*nu)*x[2]^2*x[3]^10 + 1/2*(-2*nu^3 - 64*nu^2 + 47*nu - 30)*x[2]^2*x[3]^8 + (128*nu^3 - 176*nu^2 + 184*nu + 24)*x[2]^2*x[3]^6 + (188*nu^3 + 744*nu^2 - 1384*nu + 1168)*x[2]^2*x[3]^4 + (8208*nu^3 - 13808*nu^2 + 11312*nu - 2176)*x[2]^2*x[3]^2 + (-20416*nu^3 + 13504*nu^2 + 1312*nu - 15360)*x[2]^2 + 1/16*(2*nu^3 + 2*nu^2 - 1)*x[2]*x[3]^12 + 1/4*(2*nu^3 + 7*nu^2 + 3*nu - 3)*x[2]*x[3]^10 + 1/2*(nu^2 + 2*nu + 14)*x[2]*x[3]^8 + (52*nu^3 - 232*nu^2 + 260*nu - 120)*x[2]*x[3]^6 + (-208*nu^3 + 1016*nu^2 - 1176*nu + 644)*x[2]*x[3]^4 + (8576*nu^3 - 9680*nu^2 + 5104*nu + 2448)*x[2]*x[3]^2 + (-13504*nu^3 - 1312*nu^2 + 15360*nu - 20416)*x[2] + 1/4*(-nu^3 - nu^2 - nu - 4)*x[3]^10 + (-10*nu^2 + 16*nu - 8)*x[3]^8 + (-76*nu^3 - 60*nu^2 + 164*nu - 176)*x[3]^6 + (1328*nu^3 - 208*nu^2 - 1008*nu + 1664)*x[3]^4 + (272*nu^3 - 5136*nu^2 + 6992*nu - 4736)*x[3]^2,
x[2]^8*x[3]^2 + 1/12*(nu^3 + nu^2 - nu)*x[2]^7*x[3]^4 + (-2*nu^3 + 8*nu^2 - 10*nu + 6)*x[2]^7 + 1/6*(nu^3 - nu^2 - 1)*x[2]^6*x[3]^4 + (-2*nu^3 + 2*nu^2 - 2*nu)*x[2]^6*x[3]^2 + (-16*nu^3 + 20*nu^2 - 12*nu - 4)*x[2]^6 + 1/12*(-3*nu^3 - nu^2 - nu - 2)*x[2]^5*x[3]^4 + (-22*nu^3 + 20*nu^2 - 6*nu - 10)*x[2]^5 + 1/6*(-nu^3 - nu + 2)*x[2]^4*x[3]^4 + (2*nu^3 - 2*nu + 2)*x[2]^4*x[3]^2 + (-28*nu^3 + 16*nu^2 + 4*nu - 24)*x[2]^4 + 1/12*(nu^3 - nu^2 + 3*nu + 2)*x[2]^3*x[3]^4 + (-18*nu^3 + 4*nu^2 + 14*nu - 22)*x[2]^3 + 1/6*(nu^2 + nu - 1)*x[2]^2*x[3]^4 + (2*nu^3 - 2*nu^2 + 2*nu)*x[2]^2*x[3]^2 + (-12*nu^3 - 4*nu^2 + 16*nu - 20)*x[2]^2 + 1/12*(nu^3 + nu^2 - nu)*x[2]*x[3]^4 + (2*nu^3 - 8*nu^2 + 10*nu - 6)*x[2] + (-2*nu^3 + 2*nu - 3)*x[3]^2
] >;
X<[x]> := Curve(AffineSpace(P), I);

/* Belyi map */
K<nu> := NumberField(Polynomial([RationalField() | 1, 0, 0, 0, 1]));
P<[x]> := PolynomialRing(K, 3);
I<[x]> := ideal< P | [
x[1]^2 + 1/12*(nu^3 + 4*nu^2 + 5*nu + 3)*x[2]^7*x[3]^2 + 1/144*(4*nu^3 - 3*nu^2 - 8*nu - 8)*x[2]^6*x[3]^4 + 1/12*(nu^3 + 6*nu^2 + 7*nu + 4)*x[2]^6*x[3]^2 + 1/2*x[2]^6 + 1/144*(-nu^3 - 20*nu^2 - 27*nu - 20)*x[2]^5*x[3]^4 + 1/12*(-3*nu^3 + 2*nu^2 + 5*nu + 7)*x[2]^5*x[3]^2 + 1/2*(-nu^3 - nu)*x[2]^5 + 1/72*(-12*nu^3 - 19*nu^2 - 16*nu - 2)*x[2]^4*x[3]^4 + 1/12*(-5*nu^3 + 2*nu^2 + 9*nu + 8)*x[2]^4*x[3]^2 + 1/72*(-19*nu^3 - 16*nu^2 - 2*nu + 12)*x[2]^3*x[3]^4 + 1/12*(-3*nu^3 - 2*nu^2 + nu + 5)*x[2]^3*x[3]^2 - nu^3*x[2]^3 + 1/144*(-28*nu^3 - 7*nu^2 + 16*nu + 30)*x[2]^2*x[3]^4 + 1/12*(-7*nu^3 - 2*nu^2 + 3*nu + 4)*x[2]^2*x[3]^2 + 1/2*(-2*nu^2 - 1)*x[2]^2 + 1/144*(-5*nu^3 + 4*nu^2 + 11*nu + 12)*x[2]*x[3]^4 + 1/12*(nu^3 + nu + 1)*x[2]*x[3]^2 + 1/2*(-nu^3 + nu)*x[2] + 1/12*(-nu^3 + 2*nu^2 + nu)*x[3]^2 - nu^2,
x[1]*x[2] + 1/72576*(-110*nu^3 - 965*nu^2 - 1252*nu - 807)*x[1]*x[3]^8 + 1/6048*(-519*nu^3 - 154*nu^2 + 305*nu + 589)*x[1]*x[3]^6 + 1/1008*(28*nu^3 - 61*nu^2 - 108*nu - 79)*x[1]*x[3]^4 + 1/28*(-7*nu^3 - 11*nu^2 - 17*nu - 4)*x[1]*x[3]^2 - nu*x[1] + 1/290304*(1949*nu^3 - 268*nu^2 - 2327*nu - 3024)*x[2]^7*x[3]^8 + 1/24192*(2569*nu^3 - 2462*nu^2 - 6046*nu - 6090)*x[2]^7*x[3]^6 + 1/4032*(3771*nu^3 + 3604*nu^2 + 1339*nu - 1714)*x[2]^7*x[3]^4 + 1/336*(280*nu^3 + 98*nu^2 - 147*nu - 292)*x[2]^7*x[3]^2 + 1/3483648*(-5083*nu^3 - 2646*nu^2 + 1343*nu + 4544)*x[2]^6*x[3]^10 + 1/290304*(-8650*nu^3 + 6298*nu^2 + 17559*nu + 18538)*x[2]^6*x[3]^8 + 1/24192*(-2359*nu^3 - 2458*nu^2 - 1112*nu + 888)*x[2]^6*x[3]^6 + 1/448*(42*nu^3 + 193*nu^2 + 228*nu + 133)*x[2]^6*x[3]^4 + 1/672*(-243*nu^3 + 218*nu^2 + 569*nu + 604)*x[2]^6*x[3]^2 + 1/56*(18*nu^3 + 47*nu^2 - nu - 5)*x[2]^6 + 1/3483648*(4834*nu^3 - 2453*nu^2 - 8308*nu - 9297)*x[2]^5*x[3]^10 + 1/290304*(-3186*nu^3 + 11831*nu^2 + 19928*nu + 16330)*x[2]^5*x[3]^8 + 1/24192*(-599*nu^3 - 2001*nu^2 - 2231*nu - 1160)*x[2]^5*x[3]^6 + 1/4032*(-2469*nu^3 + 2438*nu^2 + 5933*nu + 6010)*x[2]^5*x[3]^4 + 1/672*(-800*nu^3 - 17*nu^2 + 578*nu + 957)*x[2]^5*x[3]^2 + 1/56*(-103*nu^3 - 27*nu^2 + 5*nu + 46)*x[2]^5 + 1/1741824*(-583*nu^3 - 9257*nu^2 - 12510*nu - 8429)*x[2]^4*x[3]^10 + 1/290304*(13273*nu^3 + 22317*nu^2 + 18247*nu + 3523)*x[2]^4*x[3]^8 + 1/24192*(-4186*nu^3 - 4162*nu^2 - 1736*nu + 1737)*x[2]^4*x[3]^6 + 1/4032*(-334*nu^3 - 509*nu^2 - 390*nu - 125)*x[2]^4*x[3]^4 + 1/336*(275*nu^3 + 36*nu^2 - 208*nu - 307)*x[2]^4*x[3]^2 + 1/56*(45*nu^3 + 42*nu^2 - 47*nu - 108)*x[2]^4 + 1/1741824*(-9257*nu^3 - 12510*nu^2 - 8429*nu + 583)*x[2]^3*x[3]^10 + 1/290304*(13363*nu^3 + 3331*nu^2 - 8611*nu - 15525)*x[2]^3*x[3]^8 + 1/24192*(3382*nu^3 + 11836*nu^2 + 13403*nu + 7110)*x[2]^3*x[3]^6 + 1/4032*(-1709*nu^3 - 810*nu^2 + 487*nu + 1642)*x[2]^3*x[3]^4 + 1/336*(-894*nu^3 - 278*nu^2 + 451*nu + 953)*x[2]^3*x[3]^2 + 1/56*(-98*nu^3 - 9*nu^2 + 108*nu + 45)*x[2]^3 + 1/3483648*(-30103*nu^3 - 19504*nu^2 + 2509*nu + 23058)*x[2]^2*x[3]^10 + 1/290304*(-16031*nu^3 - 18200*nu^2 - 9730*nu + 4422)*x[2]^2*x[3]^8 + 1/24192*(5099*nu^3 + 2407*nu^2 - 1698*nu - 4871)*x[2]^2*x[3]^6 + 1/4032*(-2598*nu^3 - 5393*nu^2 - 4910*nu - 1741)*x[2]^2*x[3]^4 + 1/672*(629*nu^3 - 322*nu^2 - 857*nu - 1044)*x[2]^2*x[3]^2 + 1/56*(27*nu^3 - 61*nu^2 - 46*nu - 103)*x[2]^2 + 1/387072*(-1336*nu^3 - 143*nu^2 + 1134*nu + 1747)*x[2]*x[3]^10 + 1/290304*(-13330*nu^3 - 5678*nu^2 + 5286*nu + 13171)*x[2]*x[3]^8 + 1/24192*(-1526*nu^3 - 2701*nu^2 - 2304*nu - 550)*x[2]*x[3]^6 + 1/1344*(81*nu^3 - 490*nu^2 - 781*nu - 632)*x[2]*x[3]^4 + 1/672*(-316*nu^3 - 175*nu^2 + 142*nu + 309)*x[2]*x[3]^2 + 1/56*(5*nu^3 + 18*nu^2 + 103*nu - 1)*x[2] + 1/290304*(3464*nu^3 + 5809*nu^2 + 4740*nu + 901)*x[3]^8 + 1/24192*(-228*nu^3 - 965*nu^2 - 1154*nu - 676)*x[3]^6 + 1/4032*(-352*nu^3 + 17*nu^2 + 346*nu + 429)*x[3]^4 + 1/336*(-110*nu^3 - 144*nu^2 - 20*nu + 31)*x[3]^2 - nu^2,
x[1]*x[3]^10 + (16*nu^2 - 16*nu + 8)*x[1]*x[3]^8 + (80*nu^3 + 64*nu^2 - 176*nu + 192)*x[1]*x[3]^6 + (-2048*nu^3 + 640*nu^2 + 1152*nu - 2240)*x[1]*x[3]^4 + (1024*nu^3 + 6144*nu^2 - 9728*nu + 7616)*x[1]*x[3]^2 + 1/4*(-nu^3 - nu^2 + 1)*x[2]^7*x[3]^10 + (-6*nu^3 - 3*nu^2 + 9)*x[2]^7*x[3]^8 + (24*nu^3 - 36*nu^2 - 48*nu + 12)*x[2]^7*x[3]^6 + (-256*nu^3 + 184*nu^2 + 16*nu - 168)*x[2]^7*x[3]^4 + (784*nu^3 - 112*nu^2 - 640*nu + 1008)*x[2]^7*x[3]^2 + 1/48*(2*nu^3 + 2*nu^2 + nu)*x[2]^6*x[3]^12 + 1/4*(7*nu^3 + 5*nu^2 - 3*nu - 6)*x[2]^6*x[3]^10 + 1/2*(5*nu^3 + 6*nu^2 + 2*nu + 16)*x[2]^6*x[3]^8 + (-64*nu^3 + 40*nu^2 - 8*nu - 72)*x[2]^6*x[3]^6 + (296*nu^3 + 576*nu^2 - 1036*nu + 904)*x[2]^6*x[3]^4 + (-3024*nu^3 - 1552*nu^2 + 5200*nu - 5792)*x[2]^6*x[3]^2 + (-1312*nu^3 + 15360*nu^2 - 20416*nu + 13504)*x[2]^6 + 1/48*(-4*nu^3 - 3*nu^2 + 2*nu + 2)*x[2]^5*x[3]^12 + 1/4*(10*nu^3 - nu^2 - 3*nu - 7)*x[2]^5*x[3]^10 + 1/2*(-22*nu^3 + 6*nu^2 + 20*nu - 11)*x[2]^5*x[3]^8 + (-60*nu^3 + 296*nu^2 - 308*nu + 88)*x[2]^5*x[3]^6 + (-312*nu^3 - 812*nu^2 + 1568*nu - 1288)*x[2]^5*x[3]^4 + (-4224*nu^3 + 2800*nu^2 + 272*nu - 3184)*x[2]^5*x[3]^2 + (-15360*nu^3 + 20416*nu^2 - 13504*nu - 1312)*x[2]^5 + 1/48*(-9*nu^3 + 2*nu^2 + 5*nu + 10)*x[2]^4*x[3]^12 + 1/4*(-3*nu^3 - 3*nu^2 - 7*nu - 14)*x[2]^4*x[3]^10 + 1/2*(-13*nu^3 + 42*nu^2 - 7*nu + 10)*x[2]^4*x[3]^8 + (180*nu^3 - 300*nu^2 + 228*nu - 24)*x[2]^4*x[3]^6 + (-1908*nu^3 + 2536*nu^2 - 1756*nu - 88)*x[2]^4*x[3]^4 + (4912*nu^3 - 10224*nu^2 + 9520*nu - 3232)*x[2]^4*x[3]^2 + (-21728*nu^3 + 28864*nu^2 - 19104*nu - 1856)*x[2]^4 + 1/48*(2*nu^3 + 5*nu^2 + 10*nu + 9)*x[2]^3*x[3]^12 + 1/4*(-3*nu^3 - 5*nu^2 - 8*nu + 9)*x[2]^3*x[3]^10 + 1/2*(54*nu^3 - 15*nu^2 - 42*nu - 3)*x[2]^3*x[3]^8 + (-288*nu^3 + 252*nu^2 - 180)*x[2]^3*x[3]^6 + (248*nu^3 + 300*nu^2 - 520*nu + 508)*x[2]^3*x[3]^4 + (3568*nu^3 - 6768*nu^2 + 6016*nu - 1744)*x[2]^3*x[3]^2 + (-28864*nu^3 + 19104*nu^2 + 1856*nu - 21728)*x[2]^3 + 1/48*(7*nu^3 + 12*nu^2 + 10*nu - 2)*x[2]^2*x[3]^12 + 1/4*(nu^3 - nu^2 + 15*nu)*x[2]^2*x[3]^10 + 1/2*(-2*nu^3 - 64*nu^2 + 47*nu - 30)*x[2]^2*x[3]^8 + (128*nu^3 - 176*nu^2 + 184*nu + 24)*x[2]^2*x[3]^6 + (188*nu^3 + 744*nu^2 - 1384*nu + 1168)*x[2]^2*x[3]^4 + (8208*nu^3 - 13808*nu^2 + 11312*nu - 2176)*x[2]^2*x[3]^2 + (-20416*nu^3 + 13504*nu^2 + 1312*nu - 15360)*x[2]^2 + 1/16*(2*nu^3 + 2*nu^2 - 1)*x[2]*x[3]^12 + 1/4*(2*nu^3 + 7*nu^2 + 3*nu - 3)*x[2]*x[3]^10 + 1/2*(nu^2 + 2*nu + 14)*x[2]*x[3]^8 + (52*nu^3 - 232*nu^2 + 260*nu - 120)*x[2]*x[3]^6 + (-208*nu^3 + 1016*nu^2 - 1176*nu + 644)*x[2]*x[3]^4 + (8576*nu^3 - 9680*nu^2 + 5104*nu + 2448)*x[2]*x[3]^2 + (-13504*nu^3 - 1312*nu^2 + 15360*nu - 20416)*x[2] + 1/4*(-nu^3 - nu^2 - nu - 4)*x[3]^10 + (-10*nu^2 + 16*nu - 8)*x[3]^8 + (-76*nu^3 - 60*nu^2 + 164*nu - 176)*x[3]^6 + (1328*nu^3 - 208*nu^2 - 1008*nu + 1664)*x[3]^4 + (272*nu^3 - 5136*nu^2 + 6992*nu - 4736)*x[3]^2,
x[2]^8*x[3]^2 + 1/12*(nu^3 + nu^2 - nu)*x[2]^7*x[3]^4 + (-2*nu^3 + 8*nu^2 - 10*nu + 6)*x[2]^7 + 1/6*(nu^3 - nu^2 - 1)*x[2]^6*x[3]^4 + (-2*nu^3 + 2*nu^2 - 2*nu)*x[2]^6*x[3]^2 + (-16*nu^3 + 20*nu^2 - 12*nu - 4)*x[2]^6 + 1/12*(-3*nu^3 - nu^2 - nu - 2)*x[2]^5*x[3]^4 + (-22*nu^3 + 20*nu^2 - 6*nu - 10)*x[2]^5 + 1/6*(-nu^3 - nu + 2)*x[2]^4*x[3]^4 + (2*nu^3 - 2*nu + 2)*x[2]^4*x[3]^2 + (-28*nu^3 + 16*nu^2 + 4*nu - 24)*x[2]^4 + 1/12*(nu^3 - nu^2 + 3*nu + 2)*x[2]^3*x[3]^4 + (-18*nu^3 + 4*nu^2 + 14*nu - 22)*x[2]^3 + 1/6*(nu^2 + nu - 1)*x[2]^2*x[3]^4 + (2*nu^3 - 2*nu^2 + 2*nu)*x[2]^2*x[3]^2 + (-12*nu^3 - 4*nu^2 + 16*nu - 20)*x[2]^2 + 1/12*(nu^3 + nu^2 - nu)*x[2]*x[3]^4 + (2*nu^3 - 8*nu^2 + 10*nu - 6)*x[2] + (-2*nu^3 + 2*nu - 3)*x[3]^2
] >;
X<[x]> := Curve(AffineSpace(P), I);
KX<[x]> := FunctionField(X);
phi := KX!((x[2]^8 - 2*x[2]^4 + 1)/(x[2]^8 + 2*x[2]^4 + 1));
/* assign to object */
s`SolvableDBBelyiCurve := X;
s`SolvableDBBelyiMap := phi;

/*
Magma printing
*/

s`SolvableDBName := "32S5-8,8,4-g9-path3";
s`SolvableDBFilename := "32S5-8,8,4-g9-path3.m";
s`SolvableDBPassportName := "32S5-8,8,4-g9";
s`SolvableDBPathNumber := 3;
s`SolvableDBDegree := 32;
s`SolvableDBOrders := \[ 8, 8, 4 ];
s`SolvableDBType := "Hyperbolic";
s`SolvableDBGenus := 9;
s`SolvableDBGaloisOrbitSize := 1;
s`SolvableDBPassportSize := 1;
s`SolvableDBPointedPassportSize := 1;
s`SolvableDBLevel := 5;
s`SolvableDBBlocks := {@ PowerSet(IntegerRing()) |
{ IntegerRing() | 1, 5 },
{ IntegerRing() | 2, 12 },
{ IntegerRing() | 3, 16 },
{ IntegerRing() | 4, 8 },
{ IntegerRing() | 6, 19 },
{ IntegerRing() | 7, 11 },
{ IntegerRing() | 9, 23 },
{ IntegerRing() | 10, 25 },
{ IntegerRing() | 13, 29 },
{ IntegerRing() | 14, 26 },
{ IntegerRing() | 15, 17 },
{ IntegerRing() | 18, 27 },
{ IntegerRing() | 20, 28 },
{ IntegerRing() | 21, 32 },
{ IntegerRing() | 22, 24 },
{ IntegerRing() | 30, 31 }
@};
s`SolvableDBBelyiMapTiming := 1.62000000000000p15;
s`SolvableDBLocalSanityCheckTiming := 3.28000000000000p15;
s`SolvableDBLocalSanityCheckPrime := 101;
s`SolvableDBIsLowGenusOrHyperelliptic := false;
s`SolvableDBIsRamifiedAtEveryLevel := true;
s`SolvableDBGaloisOrbit := [ PowerSequence(PermutationGroup<32 |  
\[ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 1 ],
\[ 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 ]:
 Order := 263130836933693530167218012160000000 >) |
[ PermutationGroup<32 |  
\[ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 1 ],
\[ 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 ]:
 Order := 263130836933693530167218012160000000 > |
[ 12, 23, 8, 27, 2, 5, 32, 18, 6, 7, 21, 9, 16, 17, 31, 4, 30, 13, 1, 26, 24, 25, 19, 10, 11, 15, 29, 14, 3, 20, 28, 22 ],
[ 3, 10, 14, 19, 16, 21, 1, 6, 18, 15, 5, 25, 2, 11, 29, 26, 13, 30, 32, 4, 20, 9, 27, 23, 17, 7, 31, 8, 12, 24, 22, 28 ],
[ 4, 11, 15, 5, 8, 22, 2, 1, 29, 30, 12, 7, 9, 32, 16, 17, 3, 28, 24, 18, 14, 19, 13, 6, 31, 21, 20, 27, 23, 25, 10, 26 ]
]
];
s`SolvableDBPassport := [ PowerSequence(PermutationGroup<32 |  
\[ 12, 23, 8, 27, 2, 5, 32, 18, 6, 7, 21, 9, 16, 17, 31, 4, 30, 13, 1, 26, 24, 25, 19, 10, 11, 15, 29, 14, 3, 20, 28, 22 ],
\[ 3, 10, 14, 19, 16, 21, 1, 6, 18, 15, 5, 25, 2, 11, 29, 26, 13, 30, 32, 4, 20, 9, 27, 23, 17, 7, 31, 8, 12, 24, 22, 28 ],
\[ 4, 11, 15, 5, 8, 22, 2, 1, 29, 30, 12, 7, 9, 32, 16, 17, 3, 28, 24, 18, 14, 19, 13, 6, 31, 21, 20, 27, 23, 25, 10, 26 ]:
 Order := 32 >) |
[ PermutationGroup<32 |  
\[ 12, 23, 8, 27, 2, 5, 32, 18, 6, 7, 21, 9, 16, 17, 31, 4, 30, 13, 1, 26, 24, 25, 19, 10, 11, 15, 29, 14, 3, 20, 28, 22 ],
\[ 3, 10, 14, 19, 16, 21, 1, 6, 18, 15, 5, 25, 2, 11, 29, 26, 13, 30, 32, 4, 20, 9, 27, 23, 17, 7, 31, 8, 12, 24, 22, 28 ],
\[ 4, 11, 15, 5, 8, 22, 2, 1, 29, 30, 12, 7, 9, 32, 16, 17, 3, 28, 24, 18, 14, 19, 13, 6, 31, 21, 20, 27, 23, 25, 10, 26 ]:
 Order := 32 > |
[ 12, 23, 8, 27, 2, 5, 32, 18, 6, 7, 21, 9, 16, 17, 31, 4, 30, 13, 1, 26, 24, 25, 19, 10, 11, 15, 29, 14, 3, 20, 28, 22 ],
[ 16, 25, 26, 6, 3, 32, 5, 19, 27, 17, 1, 10, 12, 7, 13, 14, 29, 31, 21, 8, 28, 23, 18, 9, 15, 11, 30, 4, 2, 22, 24, 20 ],
[ 8, 7, 17, 1, 4, 24, 12, 5, 13, 31, 2, 11, 23, 21, 3, 15, 16, 20, 22, 27, 26, 6, 29, 19, 30, 32, 28, 18, 9, 10, 25, 14 ]
]
];
s`SolvableDBPointedPassport := [ PowerSequence(PermutationGroup<32 |  
\[ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 1 ],
\[ 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 ]:
 Order := 263130836933693530167218012160000000 >) |
[ PermutationGroup<32 |  
\[ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 1 ],
\[ 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 ]:
 Order := 263130836933693530167218012160000000 > |
[ 28, 26, 25, 7, 20, 30, 29, 11, 17, 27, 13, 14, 24, 6, 1, 10, 5, 21, 31, 23, 16, 8, 15, 4, 18, 19, 32, 9, 22, 2, 12, 3 ],
[ 24, 8, 23, 17, 22, 29, 30, 15, 7, 6, 31, 4, 28, 27, 21, 9, 32, 1, 13, 25, 12, 26, 11, 14, 19, 18, 5, 10, 20, 3, 16, 2 ],
[ 8, 7, 17, 1, 4, 24, 12, 5, 13, 31, 2, 11, 23, 21, 3, 15, 16, 20, 22, 27, 26, 6, 29, 19, 30, 32, 28, 18, 9, 10, 25, 14 ]
]
];
s`SolvableDBMonodromyGroup := PermutationGroup<32 |  
\[ 12, 23, 8, 27, 2, 5, 32, 18, 6, 7, 21, 9, 16, 17, 31, 4, 30, 13, 1, 26, 24, 25, 19, 10, 11, 15, 29, 14, 3, 20, 28, 22 ],
\[ 3, 10, 14, 19, 16, 21, 1, 6, 18, 15, 5, 25, 2, 11, 29, 26, 13, 30, 32, 4, 20, 9, 27, 23, 17, 7, 31, 8, 12, 24, 22, 28 ],
\[ 4, 11, 15, 5, 8, 22, 2, 1, 29, 30, 12, 7, 9, 32, 16, 17, 3, 28, 24, 18, 14, 19, 13, 6, 31, 21, 20, 27, 23, 25, 10, 26 ] >;
s`SolvableDBAutomorphismGroup := PermutationGroup<32 |  
\[ 23, 6, 27, 13, 9, 12, 24, 29, 1, 21, 22, 19, 8, 31, 20, 18, 28, 3, 2, 17, 25, 7, 5, 11, 32, 30, 16, 15, 4, 14, 26, 10 ],
\[ 2, 9, 10, 11, 12, 1, 13, 7, 19, 18, 29, 23, 22, 15, 30, 25, 31, 32, 5, 14, 3, 4, 6, 8, 27, 17, 21, 26, 24, 28, 20, 16 ],
\[ 32, 24, 28, 26, 21, 11, 19, 14, 25, 23, 6, 22, 30, 8, 27, 20, 18, 17, 7, 16, 5, 12, 10, 2, 9, 4, 15, 3, 31, 13, 29, 1 ]:
 Order := 32 >;
s`SolvableDBPointedAutomorphismGroup := PermutationGroup<32 |  
\[ 9, 19, 18, 29, 23, 2, 22, 13, 5, 32, 24, 6, 4, 30, 28, 27, 20, 16, 12, 15, 10, 11, 1, 7, 21, 31, 3, 17, 8, 26, 14, 25 ],
\[ 6, 1, 21, 22, 19, 23, 8, 24, 2, 3, 4, 5, 7, 20, 14, 32, 26, 10, 9, 31, 27, 13, 12, 29, 16, 28, 25, 30, 11, 15, 17, 18 ]:
 Order := 8 >;
s`SolvableDBPathToPP1 := [ Strings() | "PP1", "2T1-1,2,2-g0-path1", "4T2-2,2,2-g0-path1", "8T4-4,2,2-g0-path1", "16T10-4,4,2-g1-path5", "32S5-8,8,4-g9-path3" ];
s`SolvableDBParents := [ Strings() | "64S29-16,16,8-g25-path9", "64S31-16,16,8-g25-path5", "64S31-16,16,8-g25-path6", "64S29-16,16,8-g25-path10", "64S31-16,16,8-g25-path7", "64S30-16,16,8-g25-path3", "64S30-16,16,8-g25-path4", "64S31-16,16,8-g25-path8", "64S7-8,8,4-g17-path25", "64S6-8,8,4-g17-path5", "64S17-8,8,4-g17-path22", "64S6-8,8,4-g17-path6", "64S5-8,8,4-g17-path5", "64S4-8,8,4-g17-path2", "64S7-8,8,4-g17-path26" ];
s`SolvableDBChild := "16T10-4,4,2-g1-path5";

/*
Return for eval
*/

return s;
