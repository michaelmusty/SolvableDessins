s := SolvableDBObjectInitialize();

/*
Basic Information about the Passport
*/

s`SolvableDBName := "16T10-[4,4,2]-4,4,4,4-4,4,4,4-2,2,2,2,2,2,2,2-g1-path4";
s`SolvableDBFilename := "16T10-[4,4,2]-4,4,4,4-4,4,4,4-2,2,2,2,2,2,2,2-g1-path4.m";
s`SolvableDBPathNumber := 4;
s`SolvableDBDegree := 16;
s`SolvableDBABC := \[ 4, 4, 2 ];
s`SolvableDBType := "Euclidean";
s`SolvableDBGenus := 1;
s`SolvableDBGaloisOrbitSize := 1;
s`SolvableDBPassportSize := 1;
s`SolvableDBPointedPassportSize := 1;
s`SolvableDBLevel := 4;

/*
Permutations and Passports
*/

s`SolvableDBGaloisOrbit := [ PowerSequence(PermutationGroup<16 |  
\[ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1 ],
\[ 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 ]:
 Order := 20922789888000 >) |
[ PermutationGroup<16 |  
\[ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1 ],
\[ 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 ]:
 Order := 20922789888000 > |
[ 6, 9, 8, 11, 10, 5, 4, 15, 14, 1, 16, 3, 2, 13, 12, 7 ],
[ 15, 8, 9, 2, 3, 4, 5, 6, 7, 16, 1, 10, 11, 12, 13, 14 ],
[ 12, 15, 14, 9, 8, 11, 10, 5, 4, 7, 6, 1, 16, 3, 2, 13 ]
]
];
s`SolvableDBPassport := [ PowerSequence(PermutationGroup<16 |  
\[ 1, 2, 15, 16, 5, 6, 11, 12, 9, 10, 7, 8, 13, 14, 3, 4 ],
\[ 1, 2, 7, 8, 5, 6, 3, 4, 9, 10, 15, 16, 13, 14, 11, 12 ],
\[ 1, 14, 3, 16, 5, 10, 7, 12, 9, 6, 11, 8, 13, 2, 15, 4 ],
\[ 1, 3, 2, 12, 13, 15, 14, 8, 9, 11, 10, 4, 5, 7, 6, 16 ],
\[ 6, 9, 8, 11, 10, 5, 4, 15, 14, 1, 16, 3, 2, 13, 12, 7 ],
\[ 15, 8, 9, 2, 3, 4, 5, 6, 7, 16, 1, 10, 11, 12, 13, 14 ],
\[ 12, 15, 14, 9, 8, 11, 10, 5, 4, 7, 6, 1, 16, 3, 2, 13 ]:
 Order := 512 >) |
[ PermutationGroup<16 |  
\[ 1, 2, 15, 16, 5, 6, 11, 12, 9, 10, 7, 8, 13, 14, 3, 4 ],
\[ 1, 2, 7, 8, 5, 6, 3, 4, 9, 10, 15, 16, 13, 14, 11, 12 ],
\[ 1, 14, 3, 16, 5, 10, 7, 12, 9, 6, 11, 8, 13, 2, 15, 4 ],
\[ 1, 3, 2, 12, 13, 15, 14, 8, 9, 11, 10, 4, 5, 7, 6, 16 ],
\[ 6, 9, 8, 11, 10, 5, 4, 15, 14, 1, 16, 3, 2, 13, 12, 7 ],
\[ 15, 8, 9, 2, 3, 4, 5, 6, 7, 16, 1, 10, 11, 12, 13, 14 ],
\[ 12, 15, 14, 9, 8, 11, 10, 5, 4, 7, 6, 1, 16, 3, 2, 13 ]:
 Order := 512 > |
[ 6, 9, 8, 11, 10, 5, 4, 15, 14, 1, 16, 3, 2, 13, 12, 7 ],
[ 15, 8, 9, 2, 3, 4, 5, 6, 7, 16, 1, 10, 11, 12, 13, 14 ],
[ 12, 15, 14, 9, 8, 11, 10, 5, 4, 7, 6, 1, 16, 3, 2, 13 ]
]
];
s`SolvableDBPointedPassport := [ PowerSequence(PermutationGroup<16 |  
\[ 1, 2, 15, 16, 5, 6, 11, 12, 9, 10, 7, 8, 13, 14, 3, 4 ],
\[ 1, 2, 11, 12, 5, 6, 15, 16, 9, 10, 3, 4, 13, 14, 7, 8 ],
\[ 1, 14, 3, 16, 5, 10, 7, 12, 9, 6, 11, 8, 13, 2, 15, 4 ],
\[ 1, 3, 2, 12, 13, 15, 14, 8, 9, 11, 10, 4, 5, 7, 6, 16 ],
\[ 6, 9, 8, 11, 10, 5, 4, 15, 14, 1, 16, 3, 2, 13, 12, 7 ],
\[ 15, 8, 9, 2, 3, 4, 5, 6, 7, 16, 1, 10, 11, 12, 13, 14 ],
\[ 12, 15, 14, 9, 8, 11, 10, 5, 4, 7, 6, 1, 16, 3, 2, 13 ]:
 Order := 512 >) |
[ PermutationGroup<16 |  
\[ 1, 2, 15, 16, 5, 6, 11, 12, 9, 10, 7, 8, 13, 14, 3, 4 ],
\[ 1, 2, 11, 12, 5, 6, 15, 16, 9, 10, 3, 4, 13, 14, 7, 8 ],
\[ 1, 14, 3, 16, 5, 10, 7, 12, 9, 6, 11, 8, 13, 2, 15, 4 ],
\[ 1, 3, 2, 12, 13, 15, 14, 8, 9, 11, 10, 4, 5, 7, 6, 16 ],
\[ 6, 9, 8, 11, 10, 5, 4, 15, 14, 1, 16, 3, 2, 13, 12, 7 ],
\[ 15, 8, 9, 2, 3, 4, 5, 6, 7, 16, 1, 10, 11, 12, 13, 14 ],
\[ 12, 15, 14, 9, 8, 11, 10, 5, 4, 7, 6, 1, 16, 3, 2, 13 ]:
 Order := 512 > |
[ 14, 1, 16, 3, 2, 13, 12, 7, 6, 9, 8, 11, 10, 5, 4, 15 ],
[ 7, 16, 1, 10, 11, 12, 13, 14, 15, 8, 9, 2, 3, 4, 5, 6 ],
[ 12, 15, 14, 9, 8, 11, 10, 5, 4, 7, 6, 1, 16, 3, 2, 13 ]
]
];
s`SolvableDBMonodromyGroup := PermutationGroup<16 |  
\[ 6, 9, 8, 11, 10, 5, 4, 15, 14, 1, 16, 3, 2, 13, 12, 7 ],
\[ 15, 8, 9, 2, 3, 4, 5, 6, 7, 16, 1, 10, 11, 12, 13, 14 ],
\[ 12, 15, 14, 9, 8, 11, 10, 5, 4, 7, 6, 1, 16, 3, 2, 13 ] >;

/*
Curve FunctionField
*/


/*
Top Level Belyi Curve/Map
*/


/*
Graph Data
*/

s`SolvableDBPathToPP1 := [ Strings() | "PP1", "2T1-[2,1,2]-2-11-2-g0-path1", "4T2-[2,2,2]-22-22-22-g0-path2", "8T2-[4,4,2]-44-44-2222-g1-path4", "16T10-[4,4,2]-4,4,4,4-4,4,4,4-2,2,2,2,2,2,2,2-g1-path4" ];
s`SolvableDBChildren := [ Strings() | "8T2-[4,4,2]-44-44-2222-g1-path4" ];

/*
DrawDessin Code
*/

s`SolvableDBDessinCode := [];

/*
Return for eval
*/

return s;
