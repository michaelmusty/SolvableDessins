s := SolvableDBObjectInitialize();

/*
Basic Information about the Passport
*/

s`SolvableDBName := "16T10-[4,2,4]-4,4,4,4-2,2,2,2,2,2,2,2-4,4,4,4-g1-path15";
s`SolvableDBFilename := "16T10-[4,2,4]-4,4,4,4-2,2,2,2,2,2,2,2-4,4,4,4-g1-path15.m";
s`SolvableDBPathNumber := 15;
s`SolvableDBDegree := 16;
s`SolvableDBABC := \[ 4, 2, 4 ];
s`SolvableDBType := "Euclidean";
s`SolvableDBGenus := 1;
s`SolvableDBGaloisOrbitSize := 1;
s`SolvableDBPassportSize := 1;
s`SolvableDBPointedPassportSize := 1;
s`SolvableDBLevel := 4;

/*
Permutations and Passports
*/

s`SolvableDBGaloisOrbit := [ PowerSequence(PermutationGroup<16 |  
\[ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1 ],
\[ 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 ]:
 Order := 20922789888000 >) |
[ PermutationGroup<16 |  
\[ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1 ],
\[ 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 ]:
 Order := 20922789888000 > |
[ 10, 1, 8, 7, 14, 5, 12, 11, 2, 9, 16, 15, 6, 13, 4, 3 ],
[ 4, 11, 10, 1, 8, 7, 6, 5, 12, 3, 2, 9, 16, 15, 14, 13 ],
[ 11, 12, 13, 14, 7, 16, 1, 10, 3, 4, 5, 6, 15, 8, 9, 2 ]
]
];
s`SolvableDBPassport := [ PowerSequence(PermutationGroup<16 |  
\[ 1, 2, 11, 12, 5, 6, 15, 16, 9, 10, 3, 4, 13, 14, 7, 8 ],
\[ 1, 2, 7, 16, 5, 6, 3, 12, 9, 10, 15, 8, 13, 14, 11, 4 ],
\[ 1, 10, 3, 12, 5, 14, 7, 16, 9, 2, 11, 4, 13, 6, 15, 8 ],
\[ 1, 3, 2, 16, 9, 11, 14, 8, 5, 15, 6, 12, 13, 7, 10, 4 ],
\[ 10, 1, 8, 7, 14, 5, 12, 11, 2, 9, 16, 15, 6, 13, 4, 3 ],
\[ 4, 11, 10, 1, 8, 7, 6, 5, 12, 3, 2, 9, 16, 15, 14, 13 ],
\[ 11, 12, 13, 14, 7, 16, 1, 10, 3, 4, 5, 6, 15, 8, 9, 2 ]:
 Order := 512 >) |
[ PermutationGroup<16 |  
\[ 1, 2, 11, 12, 5, 6, 15, 16, 9, 10, 3, 4, 13, 14, 7, 8 ],
\[ 1, 2, 7, 16, 5, 6, 3, 12, 9, 10, 15, 8, 13, 14, 11, 4 ],
\[ 1, 10, 3, 12, 5, 14, 7, 16, 9, 2, 11, 4, 13, 6, 15, 8 ],
\[ 1, 3, 2, 16, 9, 11, 14, 8, 5, 15, 6, 12, 13, 7, 10, 4 ],
\[ 10, 1, 8, 7, 14, 5, 12, 11, 2, 9, 16, 15, 6, 13, 4, 3 ],
\[ 4, 11, 10, 1, 8, 7, 6, 5, 12, 3, 2, 9, 16, 15, 14, 13 ],
\[ 11, 12, 13, 14, 7, 16, 1, 10, 3, 4, 5, 6, 15, 8, 9, 2 ]:
 Order := 512 > |
[ 2, 9, 16, 15, 6, 13, 4, 3, 10, 1, 8, 7, 14, 5, 12, 11 ],
[ 4, 11, 10, 1, 8, 7, 6, 5, 12, 3, 2, 9, 16, 15, 14, 13 ],
[ 3, 4, 5, 6, 15, 8, 9, 2, 11, 12, 13, 14, 7, 16, 1, 10 ]
]
];
s`SolvableDBPointedPassport := [ PowerSequence(PermutationGroup<16 |  
\[ 1, 2, 11, 12, 5, 6, 15, 16, 9, 10, 3, 4, 13, 14, 7, 8 ],
\[ 1, 2, 7, 16, 5, 6, 3, 12, 9, 10, 15, 8, 13, 14, 11, 4 ],
\[ 1, 10, 3, 12, 5, 14, 7, 16, 9, 2, 11, 4, 13, 6, 15, 8 ],
\[ 1, 3, 2, 16, 9, 11, 14, 8, 5, 15, 6, 12, 13, 7, 10, 4 ],
\[ 10, 1, 8, 7, 14, 5, 12, 11, 2, 9, 16, 15, 6, 13, 4, 3 ],
\[ 4, 11, 10, 1, 8, 7, 6, 5, 12, 3, 2, 9, 16, 15, 14, 13 ],
\[ 11, 12, 13, 14, 7, 16, 1, 10, 3, 4, 5, 6, 15, 8, 9, 2 ]:
 Order := 512 >) |
[ PermutationGroup<16 |  
\[ 1, 2, 11, 12, 5, 6, 15, 16, 9, 10, 3, 4, 13, 14, 7, 8 ],
\[ 1, 2, 7, 16, 5, 6, 3, 12, 9, 10, 15, 8, 13, 14, 11, 4 ],
\[ 1, 10, 3, 12, 5, 14, 7, 16, 9, 2, 11, 4, 13, 6, 15, 8 ],
\[ 1, 3, 2, 16, 9, 11, 14, 8, 5, 15, 6, 12, 13, 7, 10, 4 ],
\[ 10, 1, 8, 7, 14, 5, 12, 11, 2, 9, 16, 15, 6, 13, 4, 3 ],
\[ 4, 11, 10, 1, 8, 7, 6, 5, 12, 3, 2, 9, 16, 15, 14, 13 ],
\[ 11, 12, 13, 14, 7, 16, 1, 10, 3, 4, 5, 6, 15, 8, 9, 2 ]:
 Order := 512 > |
[ 2, 9, 16, 15, 6, 13, 4, 3, 10, 1, 8, 7, 14, 5, 12, 11 ],
[ 4, 11, 10, 1, 8, 7, 6, 5, 12, 3, 2, 9, 16, 15, 14, 13 ],
[ 3, 4, 5, 6, 15, 8, 9, 2, 11, 12, 13, 14, 7, 16, 1, 10 ]
]
];
s`SolvableDBMonodromyGroup := PermutationGroup<16 |  
\[ 10, 1, 8, 7, 14, 5, 12, 11, 2, 9, 16, 15, 6, 13, 4, 3 ],
\[ 4, 11, 10, 1, 8, 7, 6, 5, 12, 3, 2, 9, 16, 15, 14, 13 ],
\[ 11, 12, 13, 14, 7, 16, 1, 10, 3, 4, 5, 6, 15, 8, 9, 2 ] >;

/*
Curve FunctionField
*/


/*
Top Level Belyi Curve/Map
*/


/*
Graph Data
*/

s`SolvableDBPathToPP1 := [ Strings() | "PP1", "2T1-[2,2,1]-2-2-11-g0-path1", "4T2-[2,2,2]-22-22-22-g0-path3", "8T4-[2,2,4]-2222-2222-44-g0-path5", "16T10-[4,2,4]-4,4,4,4-2,2,2,2,2,2,2,2-4,4,4,4-g1-path15" ];
s`SolvableDBChildren := [ Strings() | "8T4-[2,2,4]-2222-2222-44-g0-path5" ];

/*
DrawDessin Code
*/

s`SolvableDBDessinCode := [];

/*
Return for eval
*/

return s;
