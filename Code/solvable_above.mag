// user defined verbose flags for vprintf
  declare verbose Solvable, 2;
  declare verbose SolvableTime, 1;

intrinsic SolvablePassportSort(l::SeqEnum[SeqEnum[GrpPermElt]]) -> SeqEnum[SeqEnum[SeqEnum[GrpPermElt]]]
  {Sort a SeqEnum of triples by simultaneous conjugation.}
  if #l eq 0 then
    return l;
  else
    assert #l[1] eq 3;
    // d := Degree(l[1][1]);
    // they can't all be identity....
    d := Max([Degree(l[1][1]), Degree(l[1][2]), Degree(l[1][3])]);
    m := l;
    sorted := [];
    while #m gt 0 do
      test := m[1];
      assert #test eq 3;
      pass := [];
      Append(~pass, test);
      Remove(~m, 1);
      if #m eq 0 then
        Append(~sorted, pass);
        return sorted;
      else
        for i := #m to 1 by -1 do
          potential := m[i];
          assert #potential eq 3;
          test_name := SolvableDBGenerateName(test);
          potential_name := SolvableDBGenerateName(potential);
          if test_name eq potential_name then
            test_G := sub< Sym(d) | test >;
            potential_G := sub< Sym(d) | potential >;
            if IsIsomorphic(test_G, potential_G) then
              Remove(~m, i);
              if not IsConjugate(Sym(d), test, potential) then
                Append(~pass, potential);
              end if;
            end if;
          end if;
        end for;
        Append(~sorted, pass);
      end if;
    end while;
    return sorted;
  end if;
end intrinsic;

intrinsic SolvableAbove(s::SolvableDBObject) -> Any, Any
  {Given a solvableDBobj, find all Galois permutation triples "above" all permutation triples in the Galois orbit corresponding to s. Update the SolvableParents of s and return a SeqEnum of SolvableDBObjects covering s with their SolvableChildren updated accordingly.}
  pass := s`SolvableDBGaloisOrbit;
  new_covers := [];
  for i := 1 to #pass do
    // list0, list1, list_oo, all, possible, justramified, unramified, covers := PossibleGaloisCoveringPermutationTriples(pass[i] : return_everything := true);
    list0, list1, list_oo, all, possible, justramified, unramified, covers := PossibleGaloisCoveringPermutationTriplesRedux(pass[i] : return_everything := true);
    sorted_covers := SolvablePassportSort(covers cat unramified);
    // assert #unramified := &+[#sorted_unramified[i] : i in [1..#sorted_unramified]];
    // assert #ramified := &+[#sorted_ramified[i] : i in [1..#sorted_ramified]];
    if #sorted_covers eq 0 then // if there are no covers
      s`SolvableDBParents := [ "None" ]; // record that we checked for parents
    else
      for pass in sorted_covers do
        t := SolvableDBExample(pass);
        // t needs some graph information to merge
        t`SolvableDBChildren := [Sprintf("%o", s`SolvableDBName)]; // t should have s as a child
        t`SolvableDBPathToPP1 := s`SolvableDBPathToPP1; // start path to t with s path
        Append(~t`SolvableDBPathToPP1, t`SolvableDBName); // t is the end of path to t
        t, is_new := SolvableDBMerge(t); // merge t with the database
        if is_new then // t is new and merged with database
          // update parents of s
          if not assigned s`SolvableDBParents then
            s`SolvableDBParents := []; // initialize if not assigned
          end if;
          // s should have t as a parent
          Append(~s`SolvableDBParents, Sprintf("%o", t`SolvableDBName));
          SolvableDBWriteObject(s);
          // assert t has s as a child
          assert s`SolvableDBName in t`SolvableDBChildren;
          Append(~new_covers, t);
        end if;
      end for;
    end if;
  end for;
  return new_covers;
end intrinsic;

intrinsic SolvableLevel(l::RngIntElt) -> Any
  {multiple calls to SolvableAbove so that we can update parents and children accordingly.}
  if IsEven(l) and #Factorization(l) eq 1 then
    l_below := l div 2;
    filenames_below := SolvableDBFilenames(l_below);
    if #filenames_below eq 0 then
      error "we have not computed far enough to compute to this level yet!";
    else
      // make a bunch of files at level l by calling SolvableAbove a level below
      for name in filenames_below do
        s := SolvableDBAccessEntry(name);
        SolvableAbove(s);
      end for;
      return Sprintf("SolvableDB computed up to level %o\n", l);
    end if;
  else
    error "level is not valid";
  end if;
end intrinsic;
