// user defined verbose flags for vprintf
  declare verbose Solvable, 2;
  declare verbose SolvableTime, 1;
/*
PERMUTATIONS, PARTITIONS, and RAMIFICATION DATA
*/
  intrinsic S3Action(sigma::SeqEnum[GrpPermElt], g::GrpPermElt) -> SeqEnum[GrpPermElt]
    {Transforms a Belyi map sigma by the left action of an element g of Sym(3).}
    assert Parent(g) eq Sym(3);
    assert #sigma eq 3;
    // This function of course also works for conjugacy class representatives.
    sigmap := [ sigma[i^g] : i in [1..#sigma] ];
    if IsOdd(g) then
      sigmap := [ s^(-1) : s in sigmap ];
    end if;
    return sigmap;
  end intrinsic;
  intrinsic S3Action(parts::SeqEnum[SeqEnum[RngIntElt]], g::GrpPermElt) -> SeqEnum
    {Transforms a Belyi map partition triple by the right action of an element g of Sym(3).}
    G := Parent(g);
    assert G eq Sym(3);
    assert #parts eq 3;
    X := GSet(Sym(3), {1,2,3});
    l := [Image(g, X, 1), Image(g, X, 2), Image(g, X, 3)];
    partsp := [];
    for i in [1..#parts] do
      Append(~partsp, parts[l[i]]);
    end for;
    return partsp;
  end intrinsic;
  intrinsic SimultaneousConjugation(sigma::SeqEnum[GrpPermElt], g::GrpPermElt) -> SeqEnum[GrpPermElt]
    {Simultaneous conjugation of sigma by g.}
    assert #sigma eq 3;
    assert Degree(Parent(sigma[1])) eq Degree(Parent(g));
    return [ sigma[i]^g : i in [1,2,3] ];
  end intrinsic;
  intrinsic PermutationToPartition(perm::GrpPermElt) -> SeqEnum[RngIntElt]
    {See function name.}
    cs := CycleStructure(perm);
    part := [];
    for i in {1..#cs} do
      for j in {1..cs[i][2]} do
        Append(~part, cs[i][1]);
      end for;
    end for;
    return part;
  end intrinsic;
  intrinsic PermutationTripleToPartitions(sigma::SeqEnum[GrpPermElt]) -> SeqEnum[SeqEnum[RngIntElt]]
    {See function name.}
    assert #sigma eq 3;
    perms := [];
    for i in [1..#sigma] do
      Append(~perms, PermutationToPartition(sigma[i]));
    end for;
    return perms;
  end intrinsic;
  intrinsic ValidPartitionTriple(parts::SeqEnum[SeqEnum[RngIntElt]]) -> BoolElt
    {checks to see if there are 3 partitions of the same integer.}
    if #parts eq 3 then
      sum1 := &+[parts[1][i] : i in [1..#parts[1]]];
      sum2 := &+[parts[2][i] : i in [1..#parts[2]]];
      sum3 := &+[parts[3][i] : i in [1..#parts[3]]];
      sums := [sum1, sum2, sum3];
      if #SequenceToSet(sums) eq 1 then
        return true;
      else
        return false;
      end if;
    else
      return false;
    end if;
  end intrinsic;
  intrinsic RandomRamificationData(sigma::SeqEnum[GrpPermElt]) -> SeqEnum[SeqEnum[BoolElt]]
    {
      Given a permutation triple sigma,
      return a random triple of ramification data
      corresponding to sigma.
    }
    assert #sigma eq 3;
    rams := [];
    for s in sigma do
      ram := [];
      part := PermutationToPartition(s);
      for i in [1..#part] do
        rand := Random(1);
        bool := true;
        if rand eq 0 then
          bool := false;
        end if;
        Append(~ram, bool);
      end for;
      Append(~rams, ram);
    end for;
    return rams;
  end intrinsic;
  intrinsic ShapeOfCoveringPermutation(perm::GrpPermElt, ram::SeqEnum[BoolElt]) -> SeqEnum[RngIntElt]
    {Given a permutation perm of degree 2^i and ramification data, return a partition of 2^(i+1).}
    old_partition := PermutationToPartition(perm);
    assert #ram eq #old_partition;
    new_partition := [];
    for i in [1..#old_partition] do
      if ram[i] then
        Append(~new_partition, 2*old_partition[i]);
      else
        if not ram[i] then
          Append(~new_partition, old_partition[i]);
          Append(~new_partition, old_partition[i]);
        else
          error "ramification data corrupt!";
        end if;
      end if;
    end for;
    return new_partition;
  end intrinsic;
  intrinsic ShapeOfCoveringPermutationTriple(sigma::SeqEnum[GrpPermElt], rams::SeqEnum[SeqEnum[BoolElt]]) -> SeqEnum[SeqEnum[RngIntElt]]
    {Given a permutation triple sigma of degree 2^i and ramification data, return three partitions of 2^(i+1).}
    assert #sigma eq 3;
    assert #rams eq 3;
    parts := [];
    for i in [1..3] do
      Append(~parts, ShapeOfCoveringPermutation(sigma[i], rams[i]));
    end for;
    assert ValidPartitionTriple(parts);
    return parts;
  end intrinsic;
  intrinsic Excess(perm::GrpPermElt) -> RngIntElt
    {returns excess of permutation.}
    return Excess(PermutationToPartition(perm));
  end intrinsic;
  intrinsic Excess(part::SeqEnum[RngIntElt]) -> RngIntElt
    {returns excess of partition.}
    return &+[part[i]-1 : i in [1..#part]];
  end intrinsic;
  intrinsic Genus(sigma::SeqEnum[GrpPermElt]) -> FldRatElt
    {Returns the genus of the permutation triple according to Riemann-Hurwitz.}
    assert #sigma eq 3;
    d := Degree(sigma[1]);
    return 1-d+(Excess(sigma[1])+Excess(sigma[2])+Excess(sigma[3]))/2;
  end intrinsic;
  intrinsic Genus(parts::SeqEnum[SeqEnum[RngIntElt]]) -> FldRatElt
    {Returns the genus of the partition triple according to Riemann-Hurwitz.}
    assert ValidPartitionTriple(parts);
    d := &+[parts[1][i] : i in [1..#parts[1]]];
    return 1-d+(Excess(parts[1])+Excess(parts[2])+Excess(parts[3]))/2;
  end intrinsic;
  intrinsic IsGenus(sigma::SeqEnum[GrpPermElt]) -> BoolElt
    {true if the genus of sigma is a positive integer.}
    assert #sigma eq 3;
    g := Genus(sigma);
    return Denominator(g) eq 1 and g ge 0;
  end intrinsic;
  intrinsic IsGenus(parts::SeqEnum[SeqEnum[RngIntElt]]) -> BoolElt
    {true if the genus of the partition triple is a positive integer.}
    assert ValidPartitionTriple(parts);
    d := &+[parts[1][i] : i in [1..#parts[1]]];
    g := Genus(parts);
    return Denominator(g) eq 1 and g ge 0;
  end intrinsic;
  intrinsic IsPossibleRamification(sigma::SeqEnum[GrpPermElt], rams::SeqEnum[SeqEnum[BoolElt]] : galois := true) -> BoolElt
    {Checks if a given ramification above points corresponding to the cycles of sigma is possible according to Riemann-Hurwitz.}
    assert #sigma eq 3;
    assert #rams eq 3;
    parts := ShapeOfCoveringPermutationTriple(sigma, rams);
    if IsGenus(parts) then
      if galois then
        if #SequenceToSet(rams[1]) eq 1 and #SequenceToSet(rams[2]) eq 1 and #SequenceToSet(rams[3]) eq 1 then
          return true;
        else
          return false;
        end if;
      else
        return true;
      end if;
    else
      return false;
    end if;
  end intrinsic;
  intrinsic IntegerToBinary(a::RngIntElt, e::RngIntElt) -> SeqEnum[RngIntElt]
    {Given a lt 2^e, returns sequence of length e corresponding to a in base 2.}
    assert a lt 2^e;
    reverse_digits := [];
    for i in [1..e] do
      digit := a mod 2;
      a := Integers()!((a-digit)/2);
      Append(~reverse_digits, digit);
    end for;
    return Reverse(reverse_digits);
  end intrinsic;
  intrinsic IntegerToRamification(a::RngIntElt, sigma::SeqEnum[GrpPermElt]) -> SeqEnum[SeqEnum[BoolElt]]
    {
      Returns ramification given by integer a and triple sigma.
      Note that a must be in [0..2^e-1] where e is the number of total cycles in sigma.
    }
    pts_above_zero := #CycleDecomposition(sigma[1]);
    pts_above_one := #CycleDecomposition(sigma[2]);
    pts_above_oo := #CycleDecomposition(sigma[3]);
    pts_above := [pts_above_zero, pts_above_one, pts_above_oo];
    e := &+pts_above;
    assert a ge 0;
    assert a lt 2^e;
    binary := IntegerToBinary(a, e);
    ram_0 := [];
    ram_1 := [];
    ram_oo := [];
    for i in [1..pts_above_zero] do
      if binary[i] eq 1 then
        Append(~ram_0, true);
      else
        Append(~ram_0, false);
      end if;
    end for;
    for i in [pts_above_zero+1..pts_above_zero+pts_above_one] do
      if binary[i] eq 1 then
        Append(~ram_1, true);
      else
        Append(~ram_1, false);
      end if;
    end for;
    for i in [pts_above_zero+pts_above_one+1..pts_above_zero+pts_above_one+pts_above_oo] do
      if binary[i] eq 1 then
        Append(~ram_oo, true);
      else
        Append(~ram_oo, false);
      end if;
    end for;
    return [ram_0, ram_1, ram_oo];
  end intrinsic;
  intrinsic IntegerToGaloisRamification(a::RngIntElt, sigma::SeqEnum[GrpPermElt]) -> SeqEnum[SeqEnum[BoolElt]]
    {
      Returns ramification given by integer a and triple sigma.
      Note that a must be in [0,1,2,3,4,5,6,7].
    }
    assert a ge 0;
    assert a lt 2^3;
    pts_above_zero := #CycleDecomposition(sigma[1]);
    pts_above_one := #CycleDecomposition(sigma[2]);
    pts_above_oo := #CycleDecomposition(sigma[3]);
    pts_above := [pts_above_zero, pts_above_one, pts_above_oo];
    binary := IntegerToBinary(a, 3);
    rams := [];
    for i in [1..#binary] do
      if binary[i] eq 1 then
        Append(~rams, [true : j in [1..pts_above[i]]]);
      else
        Append(~rams, [false : j in [1..pts_above[i]]]);
      end if;
    end for;
    return rams;
  end intrinsic;
  intrinsic PossibleRamifications(sigma::SeqEnum[GrpPermElt] : galois := true) -> SeqEnum[SeqEnum[SeqEnum[BoolElt]]]
    {
      Returns all possible ramifications above a given sigma.
    }
    assert #sigma eq 3;
    assert sigma[3]*sigma[2]*sigma[1] eq Id(Sym(Degree(sigma[1])));
    pts_above_zero := #PermutationToPartition(sigma[1]);
    pts_above_one := #PermutationToPartition(sigma[2]);
    pts_above_oo := #PermutationToPartition(sigma[3]);
    pts_above := [pts_above_zero, pts_above_one, pts_above_oo];
    e := &+pts_above;
    possible := [];
    if galois then
      for i in [0..2^3-1] do
        rams := IntegerToGaloisRamification(i, sigma);
        if IsPossibleRamification(sigma, rams : galois := galois) then
          Append(~possible, rams);
        end if;
      end for;
    else
      for i in [0..2^e-1] do
        rams := IntegerToRamification(i, sigma);
        if IsPossibleRamification(sigma, rams : galois := galois) then
          Append(~possible, rams);
        end if;
      end for;
    end if;
    return possible;
  end intrinsic;
  intrinsic PossibleShapesOfCoveringPermutationTriples(sigma::SeqEnum[GrpPermElt] : galois := true) -> SeqEnum[SeqEnum[SeqEnum[RngIntElt]]]
    {returns triples of partitions possible in (degree 2) covering permutation triples of sigma according to Riemann-Hurwitz.}
    possible_rams := PossibleRamifications(sigma);
    l := [];
    for rams in possible_rams do
      Append(~l, ShapeOfCoveringPermutationTriple(sigma, rams));
    end for;
    return l;
  end intrinsic;
/*
IDENTIFYING SHEETS
*/
  intrinsic IdentifyingTau(n::RngIntElt) -> GrpPermElt
    {For n ge 2, returns tau identifying 2^n sheets to 2^(n-1) sheets}
    assert n gt 1;
    S := Sym(2^n);
    tau := Id(S);
    for i in [1..2^(n-1)] do
      tau := tau*S!(i,i+2^(n-1));
    end for;
    return tau;
  end intrinsic;
  intrinsic Mod(a::RngIntElt, b::RngIntElt) -> RngIntElt
    {if a <= b return a, if a > b return a mod b.}
    assert a le 2*b;
    if a lt b then
      return a;
    else
      if a mod b eq 0 then
        return b;
      else
        return a mod b;
      end if;
    end if;
  end intrinsic;
  intrinsic PermutationToCode(perm::GrpPermElt) -> SeqEnum[SeqEnum[RngIntElt]]
    {list encoding cycles of perm.}
    d := Degree(Parent(perm));
    fact := Factorization(d);
    assert IsDivisibleBy(d, 2) and #fact eq 1;
    cycles := CycleDecomposition(perm);
    code := [];
    for i in [1..#cycles] do
      cycle_code := [];
      for j in [1..#cycles[i]] do
        Append(~cycle_code, cycles[i][j]);
      end for;
      Append(~code, cycle_code);
    end for;
    return code;
  end intrinsic;
  intrinsic CodeToPermutation(code::SeqEnum[SeqEnum[RngIntElt]]) -> GrpPermElt
    {returns permutation corresponding to given code.}
    // find d and max length
    d := 1;
    max_length := 1;
    for i in [1..#code] do
      if #code[i] gt max_length then
        max_length := #code[i];
      end if;
      for j in [1..#code[i]] do
        if code[i][j] gt d then
          d := code[i][j];
        end if;
      end for;
    end for;
    // now we have d and max_length of a cycle
    fact := Factorization(d);
    assert IsDivisibleBy(d, 2) and #fact eq 1;
    // now we can construct the permutation from the code
    if max_length eq 1 then
      return Id(Sym(d));
    else
      SetColumns(0);
      str := "";
      for i in [1..#code] do
        str *:= "(";
        for j in [1..#code[i]-1] do
          str *:= Sprintf("%o, ", code[i][j]);
        end for;
        str *:= Sprintf("%o)", code[i][#code[i]]);
      end for;
      perm := eval Sprintf("Sym(%o)!%o", d, str);
      return perm;
    end if;
  end intrinsic;

// TODO speed this up with a hash or rework the algorithm to bypass this entirely
intrinsic ModifyCode(code::SeqEnum[SeqEnum[RngIntElt]], index::RngIntElt, new::RngIntElt) -> SeqEnum[SeqEnum[RngIntElt]]
  {returns modified code changing integer at position index to new.}
  ind := 1;
  for i in [1..#code] do
    for j in [1..#code[i]] do
      if ind eq index then
        code[i][j] := new;
      end if;
      ind +:= 1;
    end for;
  end for;
  return code;
end intrinsic;

// TODO speed this up with a hash or rework the algorithm to bypass this entirely
intrinsic CodeEntry(code::SeqEnum[SeqEnum[RngIntElt]], index::RngIntElt) -> RngIntElt
  {returns code entry at index.}
  ind := 1;
  for i in [1..#code] do
    for j in [1..#code[i]] do
      if ind eq index then
        return code[i][j];
      end if;
      ind +:= 1;
    end for;
  end for;
end intrinsic;

intrinsic UnramifiedPossibilities(perm::GrpPermElt : zentral := true) -> SeqEnum[GrpPermElt]
  {all unramified permutations above perm.}
  d := Degree(Parent(perm));
  fact := Factorization(d);
  assert IsDivisibleBy(d, 2) and #fact eq 1;
  cycles := CycleDecomposition(perm);
  tau := IdentifyingTau(fact[1][2]+1);
  unramified := [];
  global_code := PermutationToCode(perm);
  for i in [0..2^d-1] do
    code := global_code;
    guide := IntegerToBinary(i, d);
    for j in [1..d] do
      new := Mod(CodeEntry(code, j) + d, 2*d);
      if guide[j] eq 1 then
        code := ModifyCode(code, j, new);
      end if;
    end for;
    ext_code := [];
    for j in [1..#code] do
      clone := [];
      for k in [1..#code[j]] do
        Append(~clone, Mod(code[j][k] + d, 2*d));
      end for;
      Append(~ext_code, code[j]);
      Append(~ext_code, clone);
    end for;
    s := Sym(2*d)!CodeToPermutation(ext_code);
    t := Sym(2*d)!tau;
    if zentral then
      if s*t eq t*s then
        Append(~unramified, s);
      end if;
    else
      Append(~unramified, s);
    end if;
  end for;
  return SetToSequence(SequenceToSet(unramified));
end intrinsic;

intrinsic RamifiedPossibilities(perm::GrpPermElt : zentral := true) -> SeqEnum[GrpPermElt]
  {all ramified permutations above perm.}
  d := Degree(Parent(perm));
  fact := Factorization(d);
  assert IsDivisibleBy(d, 2) and #fact eq 1;
  cycles := CycleDecomposition(perm);
  tau := IdentifyingTau(fact[1][2]+1);
  ramified := [];
  global_code := PermutationToCode(perm);
  for i in [0..2^d-1] do
    code := global_code;
    guide := IntegerToBinary(i, d);
    for j in [1..d] do
      new := Mod(CodeEntry(code, j) + d, 2*d);
      if guide[j] eq 1 then
        code := ModifyCode(code, j, new);
      end if;
    end for;
    new_code := [];
    for j in [1..#code] do
      new_cycle := code[j];
      for k in [1..#code[j]] do
        Append(~new_cycle, Mod(code[j][k]+d, 2*d));
      end for;
      Append(~new_code, new_cycle);
    end for;
    s := Sym(2*d)!CodeToPermutation(new_code);
    t := Sym(2*d)!tau;
    if zentral then
      if s*t eq t*s then
        Append(~ramified, s);
      end if;
    else
      Append(~ramified, s);
    end if;
  end for;
  return SetToSequence(SequenceToSet(ramified));
end intrinsic;

intrinsic PossibleGaloisCoveringPermutations(perm::GrpPermElt : zentral := true) -> SeqEnum[GrpPermElt]
  {a sequence of degree 2 Galois covering permutations possible after identifying sheets via tau.}
  return UnramifiedPossibilities(perm : zentral := zentral) cat RamifiedPossibilities(perm : zentral := zentral);
end intrinsic;

intrinsic SortByPermutation(l::SeqEnum[SeqEnum[GrpPermElt]], perm::GrpPermElt) -> SeqEnum[SeqEnum[GrpPermElt]]
  {Given 3 lists of permutations and an element of Sym(3), sort the 3 lists according to this permutation.}
  assert #l eq 3;
  assert Parent(perm) eq Sym(3);
  new_l := [];
  for i in [1, 2, 3] do
    new_l[i] := l[i^perm];
  end for;
  assert #new_l eq 3;
  return new_l;
end intrinsic;

intrinsic SortPermutationListsBySize(l::SeqEnum[SeqEnum[GrpPermElt]]) -> SeqEnum[SeqEnum[GrpPermElt]], GrpPermElt
  {Given 3 lists of permutations, sort them by size. Return the permuted lists along with the Sym(3) element that permuted them.}
  assert #l eq 3;
  sizes := [#l[1], #l[2], #l[3]];
  perm := [1,2,3];
  ParallelSort(~sizes, ~perm);
  perm := Sym(3)!perm;
  l := SortByPermutation(l, perm);
  return l, perm;
end intrinsic;

intrinsic QuickPermutationMembership(perm::GrpPermElt, l::SeqEnum[GrpPermElt]) -> BoolElt
  {Sort l and test membership of perm in l in big oh of log(#l) time.}
  G := Parent(perm);
  perm := Eltseq(perm);
  // TODO
end intrinsic;

intrinsic PossibleGaloisCoveringPermutationTriples(sigma::SeqEnum[GrpPermElt] : zentral := true, brutal := false, lax := false, return_everything := false) -> SeqEnum[SeqEnum[GrpPermElt]]
  {return_everything yields: list_0, list_1, list_oo, all, possible, justramified, unramified, correct}
  d := Degree(Parent(sigma[1]));
  assert sigma[3]*sigma[2]*sigma[1] eq Id(Sym(d));
  // generate above each permutation
    vprintf Solvable : "\n";
    vprintf Solvable : "Generating possibilities above sigma0 = %o:\n", sigma[1];
    time0_1 := Cputime();
    list_0 := PossibleGaloisCoveringPermutations(sigma[1] : zentral := zentral);
    time0_2 := Cputime();
    vprintf Solvable : "\tOK done! That took %o seconds.\n\n", time0_2 - time0_1;
    vprintf Solvable : "Generating possibilities above sigma1 = %o:\n", sigma[2];
    time1_1 := Cputime();
    list_1 := PossibleGaloisCoveringPermutations(sigma[2] : zentral := zentral);
    time1_2 := Cputime();
    vprintf Solvable : "\tOK done! That took %o seconds.\n\n", time1_2 - time1_1;
    vprintf Solvable : "Generating possibilities above sigmaoo = %o:\n", sigma[3];
    timeoo_1 := Cputime();
    list_oo := PossibleGaloisCoveringPermutations(sigma[3] : zentral := zentral);
    timeoo_2 := Cputime();
    vprintf Solvable : "\tOK done! That took %o seconds.\n\n", timeoo_2 - timeoo_1;
    all := [];
    possible := [];
  // filter out triples that can be Belyi maps
  time2 := Cputime();
  if brutal then
    vprintf Solvable : "There are %o*%o*%o = %o possible covering triples:\n", #list_0, #list_1, #list_oo, #list_0*#list_1*#list_oo;
    vprintf Solvable : "\tChecking which ones can be Belyi maps...USING BRUTAL APPROACH\n";
    for i := 1 to #list_0 do
      for j := 1 to #list_1 do
        for k := 1 to #list_oo do
          wt0 := list_0[i];
          wt1 := list_1[j];
          wtoo := list_oo[k];
          Append(~all, [wt0, wt1, wtoo]);
          if wtoo*wt1*wt0 eq Id(Sym(2*d)) then
            wtG := sub< Sym(2*d) | wt0, wt1, wtoo >;
            if IsTransitive(wtG) and #wtG eq (2*d) then
              Append(~possible, [wt0, wt1, wtoo]);
            end if;
          end if;
        end for;
      end for;
    end for;
  else // non-brutal
    vprintf Solvable : "There are %o*%o*%o = %o possible covering triples:\n", #list_0, #list_1, #list_oo, #list_0*#list_1*#list_oo;
    // sort lists so that we loop over the smaller ones
    l, perm := SortPermutationListsBySize([list_0, list_1, list_oo]);
    assert #l eq 3;
    // TODO
    // list_0, list_1, list_oo := Explode(l);
    vprintf Solvable : "Permuting the 3 lists by %o:\n", perm;
    // vprintf Solvable : "Looping over %o*%o = %o pairs of permutations:\n", #list_0, #list_1, #list_0*#list_1;
    vprintf Solvable : "Looping over %o*%o = %o pairs of permutations:\n", #l[1], #l[2], #l[1]*#l[2];
    vprintf Solvable : "\tChecking which ones can be Belyi maps...USING LESS BRUTAL APPROACH\n";
    list_oo_inverses := [s^-1 : s in l[3]];
    for i := 1 to #l[1] do
      vprintf Solvable : "i = %o : i from 1 to %o\n", i, #l[1];
      for j := 1 to #l[2] do
        wt0 := l[1][i];
        wt1 := l[2][j];
        Append(~all, [wt0, wt1]);
        if IsOdd(perm) then
          if wt0*wt1 in list_oo_inverses then
            wtsigma := [wt0, wt1, (wt1*wt0)^-1];
            wtsigma := S3Action(perm^-1, wtsigma);
            // wtG := sub< Sym(2*d) | wt0, wt1, wtoo >;
            wtG := sub< Sym(2*d) | wtsigma >;
            if IsTransitive(wtG) and #wtG eq (2*d) then
              Append(~possible, wtsigma);
              // Append(~possible, S3Action(perm^-1, [wt0, wt1, wtoo]));
            end if;
          end if;
        else
          if wt1*wt0 in list_oo_inverses then
            wtsigma := [wt0, wt1, (wt1*wt0)^-1];
            wtsigma := S3Action(perm^-1, wtsigma);
            // wtG := sub< Sym(2*d) | wt0, wt1, wtoo >;
            wtG := sub< Sym(2*d) | wtsigma >;
            if IsTransitive(wtG) and #wtG eq (2*d) then
              Append(~possible, wtsigma);
              // Append(~possible, S3Action(perm^-1, [wt0, wt1, wtoo]));
            end if;
          end if;
        end if;
      end for;
    end for;
  end if;
  time3 := Cputime();
  vprintf Solvable : "\tOK done! That took %o seconds.\n", time3-time2;
  vprintf Solvable : "\tThere are %o possible covering triples that are Belyi maps.\n\n", #possible;
  // exclude unramified covers
  vprintf Solvable : "Now eliminate unramified covers:\n";
  unramified := [];
  justramified := possible;
  time4 := Cputime();
  abc := [Order(sigma[i]) : i in [1..3]];
  for i := #justramified to 1 by -1 do
    abc_i := [Order(justramified[i][j]) : j in [1..3]];
    if abc eq abc_i then
      Append(~unramified, justramified[i]);
      Remove(~justramified, i);
    end if;
  end for;
  time5 := Cputime();
  vprintf Solvable : "\tOK done! That took %o seconds.\n", time5-time4;
  vprintf Solvable : "\tThere are %o covering triples remaining.\n\n", #justramified;
  correct := justramified;
  // exclude isomorphic redundancies
  vprintf Solvable : "Now eliminate redundancies:\n";
  time6 := Cputime();
  for i := #correct to 1 by -1 do
    vprintf Solvable : "i = %o : i from %o to 1\n", i, #correct;
    for j := 1 to i-1 do
      if lax then
        if IsWeaklyIsomorphic(Sym(2*d), correct[i], correct[j]) then
          Remove(~correct, i);
          break j;
        end if;
      else
        if IsConjugate(Sym(2*d), correct[i], correct[j]) then
          Remove(~correct, i);
          break j;
        end if;
      end if;
    end for;
  end for;
  time7 := Cputime();
  vprintf Solvable : "\tOK done! That took %o seconds.\n", time7-time6;
  vprintf Solvable : "\tThere are %o covering triples remaining.\n\n", #correct;
  if return_everything then
    return list_0, list_1, list_oo, all, possible, justramified, unramified, correct;
  else
    return correct;
  end if;
end intrinsic;

intrinsic PossibleGaloisCoveringPermutationTriplesRedux(sigma::SeqEnum[GrpPermElt] : zentral := true, return_everything := false) -> SeqEnum[SeqEnum[GrpPermElt]]
  {return_everything yields: list_0, list_1, list_oo, all, possible, justramified, unramified, correct}
  // setup
    d := Degree(Parent(sigma[1]));
    assert sigma[3]*sigma[2]*sigma[1] eq Id(Sym(d));
  // generate above each permutation
    vprintf Solvable : "\n";
    vprintf Solvable : "Generating possibilities above sigma0 = %o:\n", sigma[1];
    time0_1 := Cputime();
    list_0 := PossibleGaloisCoveringPermutations(sigma[1] : zentral := zentral);
    time0_2 := Cputime();
    vprintf Solvable : "OK done! That took %o seconds.\n\n", time0_2 - time0_1;
    vprintf Solvable : "Generating possibilities above sigma1 = %o:\n", sigma[2];
    time1_1 := Cputime();
    list_1 := PossibleGaloisCoveringPermutations(sigma[2] : zentral := zentral);
    time1_2 := Cputime();
    vprintf Solvable : "OK done! That took %o seconds.\n\n", time1_2 - time1_1;
    vprintf Solvable : "Generating possibilities above sigmaoo = %o:\n", sigma[3];
    timeoo_1 := Cputime();
    list_oo := PossibleGaloisCoveringPermutations(sigma[3] : zentral := zentral);
    timeoo_2 := Cputime();
    vprintf Solvable : "OK done! That took %o seconds.\n\n", timeoo_2 - timeoo_1;
    all := [];
    possible := [];
  // filter out triples that can be Belyi maps
    time2 := Cputime();
    vprintf Solvable : "There are %o*%o*%o = %o possible covering triples:\n", #list_0, #list_1, #list_oo, #list_0*#list_1*#list_oo;
    // sort lists so that we loop over the smaller ones
    l, perm := SortPermutationListsBySize([list_0, list_1, list_oo]);
    assert #l eq 3;
    vprintf Solvable : "Permuting the 3 lists by %o:\n", perm;
    vprintf Solvable : "Looping over %o*%o = %o pairs of permutations:\n", #l[1], #l[2], #l[1]*#l[2];
    vprintf Solvable : "Checking which ones can be Belyi maps...USING LESS BRUTAL APPROACH\n";
    list_oo_inverses := [s^-1 : s in l[3]];
    list_oo_inverses_ordered := [PermutationToCode(list_oo_inverses[i]) : i in [1..#list_oo_inverses]];
    for i := 1 to #l[1] do
      vprintf Solvable : "i = %o : i from 1 to %o\n", i, #l[1];
      for j := 1 to #l[2] do
        wt0 := l[1][i];
        wt1 := l[2][j];
        Append(~all, [wt0, wt1]);
        if IsOdd(perm) then
          if wt0*wt1 in list_oo_inverses then // TODO make faster log
            wtsigma := [wt0, wt1, (wt1*wt0)^-1];
            wtsigma := S3Action(perm^-1, wtsigma);
            wtG := sub< Sym(2*d) | wtsigma >;
            if IsTransitive(wtG) and #wtG eq (2*d) then
              is_redundant := false;
              for k := 1 to #possible do
                if IsConjugate(Sym(2*d), possible[k], wtsigma) then
                  is_redundant := true;
                  break k;
                end if;
              end for;
              if not is_redundant then
                Append(~possible, wtsigma);
              end if;
            end if;
          end if;
        else
          if wt1*wt0 in list_oo_inverses then // TODO make faster log
            wtsigma := [wt0, wt1, (wt1*wt0)^-1];
            wtsigma := S3Action(perm^-1, wtsigma);
            wtG := sub< Sym(2*d) | wtsigma >;
            if IsTransitive(wtG) and #wtG eq (2*d) then
              is_redundant := false;
              for k := 1 to #possible do
                if IsConjugate(Sym(2*d), possible[k], wtsigma) then
                  is_redundant := true;
                  break k;
                end if;
              end for;
              if not is_redundant then
                Append(~possible, wtsigma);
              end if;
            end if;
          end if;
        end if;
      end for;
    end for;
    time3 := Cputime();
    vprintf Solvable : "OK done! That took %o seconds.\n", time3-time2;
    vprintf Solvable : "There are %o possible covering triples that are Belyi maps.\n\n", #possible;
  // exclude unramified covers
    vprintf Solvable : "Now eliminate unramified covers:\n";
    unramified := [];
    justramified := possible;
    time4 := Cputime();
    abc := [Order(sigma[i]) : i in [1..3]];
    for i := #justramified to 1 by -1 do
      abc_i := [Order(justramified[i][j]) : j in [1..3]];
      if abc eq abc_i then
        Append(~unramified, justramified[i]);
        Remove(~justramified, i);
      end if;
    end for;
    time5 := Cputime();
    vprintf Solvable : "OK done! That took %o seconds.\n", time5-time4;
    vprintf Solvable : "There are %o covering triples remaining.\n\n", #justramified;
    correct := justramified;
  // exclude isomorphic redundancies
    vprintf Solvable : "Now eliminate redundancies (HINT: there shouldn't be any!):\n";
    time6 := Cputime();
    for i := #correct to 1 by -1 do
      vprintf Solvable : "i = %o : i from %o to 1\n", i, #correct;
      for j := 1 to i-1 do
        if IsConjugate(Sym(2*d), correct[i], correct[j]) then
          Remove(~correct, i);
          break j;
        end if;
      end for;
    end for;
    time7 := Cputime();
    vprintf Solvable : "OK done! That took %o seconds.\n", time7-time6;
    vprintf Solvable : "There are %o covering triples remaining.\n\n", #correct;
  // return
    if return_everything then
      return list_0, list_1, list_oo, all, possible, justramified, unramified, correct;
    else
      return correct;
    end if;
end intrinsic;

/*
MISC
*/
  intrinsic IsExtension(G::GrpPerm, H::GrpPerm) -> BoolElt
    {True if there is a normal order 2 subgroup K of G with G/K isomorphic to H.}
    bool := false;
    lattice := SubgroupLattice(G);
    order_two_normal := [];
    for i in [1..#lattice] do
      K := lattice[i];
      if #K eq 2 and IsNormal(G, K) then
        Append(~order_two_normal, K);
      end if;
    end for;
    for i in [1..#order_two_normal] do
      if IsIsomorphic(G/order_two_normal[i], H) then
        bool := true;
      end if;
    end for;
    return bool;
  end intrinsic;
  intrinsic UniqueBelyiMaps(l::SeqEnum[SeqEnum[GrpPermElt]] : lax := false) -> SeqEnum[SeqEnum[GrpPermElt]]
    {Given a list of permutation triples eliminate redundancies in the list.}
    assert #l gt 0;
    assert #l[1] gt 0;
    S := Parent(l[1][1]);
    unique := l;
    for i := #unique to 1 by -1 do
      for j in [1..i-1] do
        if lax then
          if IsWeaklyIsomorphic(S, unique[i], unique[j]) then
            Remove(~unique, i);
            break j;
          end if;
        else
          if IsConjugate(S, unique[i], unique[j]) then
            Remove(~unique, i);
            break j;
          end if;
        end if;
      end for;
    end for;
    return unique;
  end intrinsic;
