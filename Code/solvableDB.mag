intrinsic SolvableDBAccessEntry(filename::MonStgElt) -> Any
  {Load the SolvableDBObject in filename. Assumes current directory is repo directory i.e. /SolvableDessins.}
  // directory stuff
    dir := GetCurrentDirectory();
    parentdir := Pipe(Sprintf("basename 'dirname %o'", dir), "");
    if parentdir ne "SolvableDessins\n" then
      error "make sure your working directory is /SolvableDB";
    end if;
  // extract d from filename
    num_chars := 0;
    for i in {1..#filename} do
      if filename[i] eq "T" or filename[i] eq "S" then
        num_chars := i-1;
      end if;
    end for;
    assert num_chars ne 0;
    d_str := "";
    for i in {1..num_chars} do
      d_str *:= filename[i];
    end for;
    d := StringToInteger(d_str);
  // extract text from file
    file := dir cat Sprintf("/SolvableDB/%o/%o", d, filename);
    str := Read(file);
  // eval
    s := eval str;
    assert Type(s) eq SolvableDBObject;
    return s;
end intrinsic;

intrinsic SolvableDBStringToCode(str::MonStgElt) -> SeqEnum[RngIntElt]
  {Converts a string to a list of integers.}
  l := [];
  for i in {1..#str} do
    Append(~l, StringToCode(str[i]));
  end for;
  return l;
end intrinsic;

intrinsic SolvableDBCodeToString(l::SeqEnum[RngIntElt]) -> MonStgElt
  {Converts a list of integers to a string.}
  str := "";
  for i in {1..#l} do
    str *:= CodeToString(l[i]);
  end for;
  return str;
end intrinsic;

intrinsic SolvableDBDeleteLineBreaks(str::MonStgElt) -> MonStgElt
  {Given a string str possibly with line breaks return a string without the line breaks.}
  str_new := "";
  for i in [1..#str] do
    if str[i] ne "\n" then
      str_new *:= str[i];
    end if;
  end for;
  return str_new;
end intrinsic;

intrinsic SolvableDBGenerateName(sigma::SeqEnum[GrpPermElt]) -> MonStgElt
  {Generate a unique string identifying the passport corresponding to sigma.}
  assert #sigma eq 3;
  H := Parent(sigma[1]);
  d := Degree(H);
  G := sub<Sym(d)|sigma>;
  assert IsTransitive(G);
  a,b,c := Explode([Order(sigma[1]), Order(sigma[2]), Order(sigma[3])]);
  if d gt 16 then
    d, g := Explode(IdentifyGroup(G)); // small group identification
    name := Sprintf("%oS%o-%o,%o,%o", d, g, a, b, c);
  else
    g, d := TransitiveGroupIdentification(G);
    name := Sprintf("%oT%o-%o,%o,%o", d, g, a, b, c);
  end if;
  c0 := #CycleDecomposition(sigma[1]);
  c1 := #CycleDecomposition(sigma[2]);
  coo := #CycleDecomposition(sigma[3]);
  genus := (d+2-c0-c1-coo)/2;
  name *:= Sprintf("-g%o", genus);
  return name;
end intrinsic;

intrinsic SolvableDBUnsolvableName(s::SolvableDBObject) -> MonStgElt
  {given an obj s, return "passport name" instead of "solvable name" ugh.}
  return SolvableDBGenerateName(s`SolvableDBGaloisOrbit[1]);
end intrinsic;

intrinsic SolvableDBFieldWriter(F::FldRat : level := 0) -> MonStgElt
  {Given a field Flevel return a string to recreate the field.}
  str := Sprintf("F%o := Rationals();\n", level);
  return str;
end intrinsic;

intrinsic SolvableDBFieldWriter(F::FldNum : level := 0) -> MonStgElt
  {Given a field Flevel<nulevel> return a string to recreate the field.}
  SetColumns(0);
  str := "";
  gens := GeneratorsSequence(F);
  assert #gens eq 1;
  if Degree(F) eq 1 then
    str *:= Sprintf("F%o<nu%o> := RationalsAsNumberField();\n", level, level);
  else
    minpolytext := Sprintf("%m", MinimalPolynomial(F.1));
    str *:= Sprintf("F%o<nu%o> := NumberField(%o);\n", level, level, minpolytext);
  end if;
  return str;
end intrinsic;

intrinsic VarText(var::MonStgElt, lower::RngIntElt, upper::RngIntElt) -> MonStgElt
  {returns text "varlower, varlower+1, ..., varupper-1, varupper".}
  assert upper ge lower;
  var_text := "";
  if upper eq lower then
    var_text *:= Sprintf("%o%o", var, lower);
  else
    for i := lower to upper-1 by 1 do
      var_text *:= Sprintf("%o%o, ", var, i);
    end for;
    var_text *:= Sprintf("%o%o", var, upper);
  end if;
  return var_text;
end intrinsic;

intrinsic HomText(var::MonStgElt, lower::RngIntElt, upper::RngIntElt) -> MonStgElt
  {returns text "var.lower, var.lower+1, ..., var.upper"}
  assert upper ge lower;
  var_text := "";
  if upper eq lower then
    var_text *:= Sprintf("%o.%o", var, lower);
  else
    for i := lower to upper-1 by 1 do
      var_text *:= Sprintf("%o.%o, ", var, i);
    end for;
    var_text *:= Sprintf("%o.%o", var, upper);
  end if;
  return var_text;
end intrinsic;

intrinsic SolvableDBBelyiMapWriter(X::Crv, phi::FldFunFracSchElt : level := 0, index := 0) -> MonStgElt
  {Given a BelyiMap [X, phi] return text to recreate [X, phi]. This text (once loaded) makes X and phi available in the session.}
  // TODO assertions about phi
  assert IsAffine(X);
  K := BaseField(X);
  KX := FunctionField(X);
  assert Parent(phi) eq KX;
  assert phi eq KX.1;
  SetColumns(0);
  str := SolvableDBFieldWriter(K : level := level, index := index);
  varx := VarText("x", 0, level);
  varz := VarText("z", 0, level);
  varz *:= ", w";
  str *:= Sprintf("P%o<%o> := PolynomialRing(K%o_%o, %o);\n", level, varx, level, index, level+1);
  str *:= Sprintf("AA%o<%o> := AffineSpace(P%o);\n", level+1, varx, level);
  str *:= Sprintf("curve_equations_%o := [];\n", index);
  curve_equations := DefiningEquations(X);
  for i in [1..#curve_equations] do
    str *:= Sprintf("Append(~curve_equations_%o, %o);\n", index, curve_equations[i]);
  end for;
  str *:= Sprintf("I%o_%o := ideal< P%o | curve_equations_%o >;\n", level, index, level, index);
  str *:= Sprintf("Y%o_%o<%o> := Curve(AA%o, I%o_%o);\n", level, index, varx, level+1, level, index);
  str *:= Sprintf("X%o_%o<%o> := ProjectiveClosure(Y%o_%o);\n", level, index, varz, level, index);
  str *:= Sprintf("KX%o_%o<%o> := FunctionField(X%o_%o);\n", level, index, varx, level, index);
  str *:= Sprintf("phi%o_%o := KX%o_%o.1;\n", level, index, level, index);
  return str;
end intrinsic;

intrinsic SolvableDBWriteObjectText(s::SolvableDBObject) -> MonStgElt
  {same as SolvableDBWriteObject but just return the text without writing to file.}
  // directory stuff
    dir := GetCurrentDirectory();
    parentdir := Pipe(Sprintf("basename 'dirname %o'", dir), "");
    if parentdir ne "SolvableDessins\n" then
      error "make sure your working directory is /SolvableDessins";
    end if;
    if (not assigned s`SolvableDBDegree) or (not assigned s`SolvableDBName) then
      error "this SolvableDB object does not have enough information worth saving!";
    else
      d := s`SolvableDBDegree;
      name := s`SolvableDBName;
      filename := s`SolvableDBFilename;
    end if;
    SetColumns(0);
    // savedir := Sprintf(dir cat "/SolvableDB/%o/%o" cat ".m", d, name);
    savedir := Sprintf(dir cat "/SolvableDB/%o/%o", d, filename);
    str := "";
  // always make an instance of the object
    str *:= "s := SolvableDBObjectInitialize();\n";
  // sort attributes
    all_attrs := GetAttributes(Type(s));
    easy_attrs := [];
    Append(~easy_attrs, "SolvableDBName");
    Append(~easy_attrs, "SolvableDBFilename");
    Append(~easy_attrs, "SolvableDBPathNumber");
    Append(~easy_attrs, "SolvableDBDegree");
    Append(~easy_attrs, "SolvableDBABC");
    Append(~easy_attrs, "SolvableDBType");
    Append(~easy_attrs, "SolvableDBGenus");
    Append(~easy_attrs, "SolvableDBGaloisOrbitSize");
    Append(~easy_attrs, "SolvableDBPassportSize");
    Append(~easy_attrs, "SolvableDBPointedPassportSize");
    Append(~easy_attrs, "SolvableDBLevel");
    Append(~easy_attrs, "SolvableDBBlocks");
    permutation_attrs := [];
    Append(~permutation_attrs, "SolvableDBGaloisOrbit");
    Append(~permutation_attrs, "SolvableDBPassport");
    Append(~permutation_attrs, "SolvableDBPointedPassport");
    Append(~permutation_attrs, "SolvableDBMonodromyGroup");
    Append(~permutation_attrs, "SolvableDBAutomorphismGroup");
    Append(~permutation_attrs, "SolvableDBPointedAutomorphismGroup");
    curve_function_field_attrs := [];
    Append(~curve_function_field_attrs, "SolvableDBCurveBaseFieldList");
    Append(~curve_function_field_attrs, "SolvableDBCurvePolynomialRingList");
    Append(~curve_function_field_attrs, "SolvableDBCurveAmbientList");
    Append(~curve_function_field_attrs, "SolvableDBCurveIdealList");
    Append(~curve_function_field_attrs, "SolvableDBCurveList");
    extract_attrs := [];
    Append(~extract_attrs, "SolvableDBExtractNumerator");
    Append(~extract_attrs, "SolvableDBExtractDenominator");
    belyimaps_attrs := [];
    Append(~belyimaps_attrs, "SolvableDBBelyiCurves");
    Append(~belyimaps_attrs, "SolvableDBBelyiMaps");
    graph_attrs := [];
    Append(~graph_attrs, "SolvableDBPathToPP1");
    Append(~graph_attrs, "SolvableDBParents");
    Append(~graph_attrs, "SolvableDBChildren");
  /*
  write easy attributes with magma printing
  */
    str *:= "\n/*\nBasic Information about the Passport\n*/\n\n";
    for attr in easy_attrs do
      if assigned s``attr then
        str *:= Sprintf("s`%o := ", attr);
        str *:= Sprintf("%m;\n", s``attr);
      end if;
    end for;
  /*
  write attributes containing permutations with magma printing
  */
    str *:= "\n/*\nPermutations and Passports\n*/\n\n";
    for attr in permutation_attrs do
      if assigned s``attr then
        str *:= Sprintf("s`%o := ", attr);
        str *:= Sprintf("%m;\n", s``attr);
      end if;
    end for;
  /*
  write curve function field attrs using custom printing
  */
    str *:= "\n/*\nCurve FunctionField\n*/\n\n";
    // level := s`SolvableDBLevel; // not compatible with new model code
    if assigned s`SolvableDBCurveBaseFieldList and assigned s`SolvableDBCurvePolynomialRingList and assigned s`SolvableDBCurveAmbientList and assigned s`SolvableDBCurveIdealList and assigned s`SolvableDBCurveList then
      level := Dimension(Ambient(s`SolvableDBBelyiCurve)); // update
      level_old := s`SolvableDBLevel; // just depends on degree of Belyi map
      assert #s`SolvableDBCurveBaseFieldList eq level_old+1;
      assert #s`SolvableDBCurvePolynomialRingList eq level_old+1;
      assert #s`SolvableDBCurveAmbientList eq level_old+1;
      assert #s`SolvableDBCurveIdealList eq level_old+1;
      assert #s`SolvableDBCurveList eq level_old+1;
      str *:= Sprintf("s`SolvableDBCurveBaseFieldList := [* *];\n");
      str *:= Sprintf("s`SolvableDBCurvePolynomialRingList := [* *];\n");
      str *:= Sprintf("s`SolvableDBCurveAmbientList := [* *];\n");
      str *:= Sprintf("s`SolvableDBCurveIdealList := [* *];\n");
      str *:= Sprintf("s`SolvableDBCurveList := [* *];\n");
      for i := 0 to level_old do
        // SolvableDBCurveBaseFieldList level i
        F := s`SolvableDBCurveBaseFieldList[i+1];
        str *:= SolvableDBFieldWriter(F : level := i);
        level_pass := Dimension(Ambient(s`SolvableDBCurveList[i+1]));
        str *:= Sprintf("F := F%o;\n", i); // TODO weird...
        // check if Fi eq Fj for j<i
        // came up during d8t2_2_4_4_path3
          min_j := 0;
          for j := 1 to i do
            field_i := s`SolvableDBCurveBaseFieldList[i];
            field_j := s`SolvableDBCurveBaseFieldList[j];
            if Type(field_i) eq FldNum and Type(field_j) eq FldNum then
              if IsIsomorphic(field_i, field_j) then
                if min_j eq 0 then
                  min_j := j;
                else
                  break j;
                end if;
              end if;
            end if;
          end for;
          if min_j ne 0 then // Fi eq Fj for some j<i, with j minimal
            str *:= Sprintf("F%o := F%o;\n", i, min_j);
          end if;
        str *:= Sprintf("Append(~s`SolvableDBCurveBaseFieldList, F%o);\n", i);
        // SolvableDBCurvePolynomialRingList level i
          num_vars := Rank(s`SolvableDBCurvePolynomialRingList[i+1]);
          printf "i=%o, num_vars=%o\n", i, num_vars; // TODO delete after debugging
          vartext := VarText("x", 0, num_vars-1);
          str *:= Sprintf("PX%o<%o> := PolynomialRing(F%o, %o);\n", i, vartext, i, num_vars);
          str *:= Sprintf("Append(~s`SolvableDBCurvePolynomialRingList, PX%o);\n", i);
          /* incompatible with new model code
          vartext := VarText("x", 0, i);
          str *:= Sprintf("PX%o<%o> := PolynomialRing(F%o, %o);\n", i, vartext, i, i+1);
          str *:= Sprintf("Append(~s`SolvableDBCurvePolynomialRingList, PX%o);\n", i);
          */
        // SolvableDBCurveAmbientList level i
          vartext := VarText("x", 0, num_vars-1);
          str *:= Sprintf("AA%o<%o> := AffineSpace(PX%o);\n", i, vartext, i);
          str *:= Sprintf("Append(~s`SolvableDBCurveAmbientList, AA%o);\n", i);
          /* incompatible with new model code
          vartext := VarText("x", 0, i);
          str *:= Sprintf("AA%o<%o> := AffineSpace(PX%o);\n", i, vartext, i);
          str *:= Sprintf("Append(~s`SolvableDBCurveAmbientList, AA%o);\n", i);
          */
        // SolvableDBCurveIdealList level i
          vartext := VarText("x", 0, num_vars-1);
          str *:= Sprintf("I%o<%o> := ideal< PX%o | %o >;\n", i, vartext, i, Basis(s`SolvableDBCurveIdealList[i+1]));
          str *:= Sprintf("Append(~s`SolvableDBCurveIdealList, I%o);\n", i);
          /*
            vartext := VarText("x", 0, i);
            // str *:= Sprintf("I%o<%o> := %m;\n", i, vartext, s`SolvableDBCurveIdealList[i+1]);
            str *:= Sprintf("I%o<%o> := ideal< PX%o | %o >;\n", i, vartext, i, Basis(s`SolvableDBCurveIdealList[i+1]));
            str *:= Sprintf("Append(~s`SolvableDBCurveIdealList, I%o);\n", i);
          */
        // SolvableDBCurveList level i
          vartext := VarText("x", 0, num_vars-1);
          str *:= Sprintf("X%o<%o> := Curve(AA%o, ideal< PX%o | %o >);\n", i, vartext, i, i, Basis(Ideal(s`SolvableDBCurveList[i+1])));
          str *:= Sprintf("Append(~s`SolvableDBCurveList, X%o);\n", i);
          /*
            vartext := VarText("x", 0, i);
            // str *:= Sprintf("X%o<%o> := %m;\n", i, vartext, s`SolvableDBCurveList[i+1]);
            // str *:= Sprintf("X%o<%o> := Curve(AA%o, I%o);\n", i, vartext, i, i);
            str *:= Sprintf("X%o<%o> := Curve(AA%o, ideal< PX%o | %o >);\n", i, vartext, i, i, Basis(Ideal(s`SolvableDBCurveList[i+1])));
            str *:= Sprintf("Append(~s`SolvableDBCurveList, X%o);\n", i);
          */
      end for;
    end if;
  /*
  write extract attrs using custom printing
  */
  // TODO TODO
    str *:= "\n/*\nExtracted Numerator/Denominator Polynomials\n*/\n\n";
    level := s`SolvableDBLevel;
    if assigned s`SolvableDBExtractNumerator then
      assert assigned s`SolvableDBExtractDenominator;
      // these will live in the polynomial ring at level minus 1 (previous level)
      a := s`SolvableDBExtractNumerator;
      b := s`SolvableDBExtractDenominator;
      /* incompatible with new model code
      PolyRing := Parent(a);
      assert PolyRing eq Parent(b);
      assert Rank(PolyRing) eq level+1;
      */
      Pextract := s`SolvableDBCurvePolynomialRingList[level];
      extract_rank := Rank(Pextract);
      print extract_rank;
      // Pex := eval Sprintf("Pex<%o> := Pextract; return Pex;", VarText("x", 0, extract_rank-1));
      vartext := VarText("x", 0, extract_rank-1);
      str *:= Sprintf("Pextract<%o> := PX%o;\n", vartext, level-1);
      str *:= Sprintf("s`SolvableDBExtractNumerator := Pextract!(%o);\n", s`SolvableDBExtractNumerator);
      str *:= Sprintf("s`SolvableDBExtractDenominator := Pextract!(%o);\n", s`SolvableDBExtractDenominator);
    end if;
  /*
  write list of BelyiMaps with custom printing
  */
    str *:= "\n/*\nTop Level Belyi Curve/Map\n*/\n\n";
    if assigned s`SolvableDBBelyiCurve and assigned s`SolvableDBBelyiMap then
      assert assigned s`SolvableDBCurveList;
      curve := s`SolvableDBBelyiCurve;
      map := s`SolvableDBBelyiMap;
      level := s`SolvableDBLevel;
      assert ISA(Type(curve), Crv);
      assert ISA(Type(map), FldFunFracSchElt);
      // assert s`SolvableDBCurveList[level+1] eq curve; // incompatible with new model code
      vartext := VarText("x", 0, level);
      str *:= Sprintf("X<%o> := s`SolvableDBCurveList[%o];\n", vartext, level+1);
      str *:= Sprintf("s`SolvableDBBelyiCurve := X;\n");
      str *:= Sprintf("KX<%o> := FunctionField(X);\n", vartext);
      str *:= Sprintf("s`SolvableDBBelyiMap := KX.1;\n");
    end if;
  /*
  write graph attributes using magma printing
  */
    str *:= "\n/*\nGraph Data\n*/\n\n";
    for attr in graph_attrs do
      if assigned s``attr then
        str *:= Sprintf("s`%o := ", attr);
        str *:= Sprintf("%m;\n", s``attr);
      end if;
    end for;
  // return statement for eval
    str *:= "\n/*\nReturn for eval\n*/\n\n";
    str *:= Sprintf("return s;");
  return str;
end intrinsic;

intrinsic SolvableDBWriteObject(s::SolvableDBObject) -> MonStgElt
  {Assuming working directory is repo i.e. /SolvableDessins, write a (magma loadable) SolvableDBObject s to filename.m in the appropriate directory.}
  // directory stuff
    dir := GetCurrentDirectory();
    parentdir := Pipe(Sprintf("basename 'dirname %o'", dir), "");
    if parentdir ne "SolvableDessins\n" then
      error "make sure your working directory is /SolvableDessins";
    end if;
    if (not assigned s`SolvableDBDegree) or (not assigned s`SolvableDBName) then
      error "this SolvableDB object does not have enough information worth saving!";
    else
      d := s`SolvableDBDegree;
      name := s`SolvableDBName;
      filename := s`SolvableDBFilename;
    end if;
    SetColumns(0);
    // savedir := Sprintf(dir cat "/SolvableDB/%o/%o" cat ".m", d, name);
    savedir := Sprintf(dir cat "/SolvableDB/%o/%o", d, filename);
    str := "";
  // TODO TODO TODO update from SolvableDBWriteObjectText
  // write to file
  // TODO requires degree directory to exist before writing
    Write(savedir, str : Overwrite := true);
    // System(Sprintf("chmod 666 %o", filename)); // set file permissions
    // returnText := Sprintf("%o written in directory %o\n", filename, savedir);
    returnText := Sprintf("%o written in directory %o/SolvableDB/%o\n", filename, GetCurrentDirectory(), d);
    return returnText;
end intrinsic;

// intrinsic SolvableDBExample(pass::SeqEnum[SeqEnum[GrpPermElt]]) -> MonStgElt
intrinsic SolvableDBExample(pass::SeqEnum[SeqEnum[GrpPermElt]]) -> SolvableDBObject
  // {Creates a SolvableDBObject file corresponding to sigma in the directory SolvableDB/d where d is the degree of sigma. This assumes the current directory is SolvableDB.}
  {Creates a SolvableDBObject corresponding to pass. This assumes the current directory is SolvableDessins.}
  // some sanity checks
    for i in [1..#pass] do
      sigma := pass[i];
      assert #sigma eq 3;
      assert Type(Parent(sigma[1])) eq GrpPerm;
      d := Degree(Parent(sigma[1]));
      G := sub< Sym(d) | sigma >;
      assert IsTransitive(G);
    end for;
    check_pass := PassportRepresentatives(sigma);
    check_pointed_pass := PassportRepresentatives(sigma : Pointed := true);
    /*
    if #pass ne #check_pass then
      error Sprintf("#pass = %o but #check_pass = %o :(\n", #pass, #check_pass);
    end if;
    */
  // stuff we need later
    sigma := pass[1];
    d := Degree(Parent(sigma[1]));
    G := sub< Sym(d) | sigma >;
  // directory stuff
    dir := GetCurrentDirectory();
    parentdir := Pipe(Sprintf("basename 'dirname %o'", dir), "");
    if parentdir ne "SolvableDessins\n" then
      error "make sure your working directory is /SolvableDessins";
    end if;
    db := dir cat "/SolvableDB";
    directory := Sprintf("%o/%o/", db, d);
  // create one SolvableDBObject per passport
    s := SolvableDBObjectInitialize();
  // generate name
    newname := SolvableDBGenerateName(sigma);
  // check to see if example already exists in the SolvableDB
    // TODO what do we do if it does...
    ls := Pipe(Sprintf("ls %o", directory), "");
    filenames := Split(ls, "\n");
    // check to see if there are matches in the folder
    /*
      matches := [];
      for i in {1..#filenames} do
        if Substring(filenames[i], 1, #newname) eq newname then
          Append(~matches, filenames[i]);
        end if;
      end for;
      if #matches gt 0 then
        // error "already a passport with this name in this folder!\n";
        printf "WARNING:\n%o already exists in directory\n%o\nProceed with caution!\n", newname, directory;
      end if;
    */
  // SolvableDBName
    s`SolvableDBName := Sprintf("%o-path1", newname); // always initialize path# to 1?
  // SolvableDBFilename
    s`SolvableDBFilename := s`SolvableDBName cat ".m";
  // SolvableDBPathNumber Always initialized to 1
    s`SolvableDBPathNumber := 1;
  // SolvableDBDegree
    s`SolvableDBDegree := d;
  // SolvableDBABC
    s`SolvableDBABC := [Order(sigma[i]) : i in {1..3}];
  // SolvableDBType
    a,b,c := Explode(s`SolvableDBABC);
    if 1/a+1/b+1/c gt 1 then
      s`SolvableDBType := "Spherical";
    elif 1/a+1/b+1/c eq 1 then
      s`SolvableDBType := "Euclidean";
    else
      s`SolvableDBType := "Hyperbolic";
    end if;
  // SolvableDBGenus
    c0 := #CycleDecomposition(sigma[1]);
    c1 := #CycleDecomposition(sigma[2]);
    coo := #CycleDecomposition(sigma[3]);
    genus := (d+2-c0-c1-coo)/2;
    s`SolvableDBGenus := genus;
  // SolvableDBGaloisOrbitSize
    s`SolvableDBGaloisOrbitSize := #pass;
  // SolvableDBSize
    s`SolvableDBPassportSize := #check_pass;
  // SolvableDBPointedPassportSize
    s`SolvableDBPointedPassportSize := #check_pointed_pass;
  // SolvableDBLevel
    floor := Floor(Log(d)/Log(2));
    ceil := Ceiling(Log(d)/Log(2));
    assert floor eq ceil;
    s`SolvableDBLevel := floor;
  // SolvableDBGaloisOrbit
    s`SolvableDBGaloisOrbit := pass;
  // SolvableDBPassport
    s`SolvableDBPassport := check_pass;
  // SolvableDBPointedPassport
    s`SolvableDBPointedPassport := check_pointed_pass;
  // SolvableDBMonodromyGroup
    s`SolvableDBMonodromyGroup := G;
  // SolvableDBAutomorphismGroup and SolvableDBDessinCode
    if s`SolvableDBType eq "Hyperbolic" then
      s`SolvableDBAutomorphismGroup := AutomorphismGroup(sigma);
      s`SolvableDBPointedAutomorphismGroup := PointedAutomorphismGroup(sigma);
      /* OLD way
        lcm := LeastCommonMultiple([a,b,c]);
        vprint Shimura : Sprintf("\nComputing Gamma with LCM(a,b,c) = %o...\n", lcm);
        if lcm lt 100 then
          Gamma := TriangleSubgroup(sigma);
        else
          Gamma := TriangleSubgroup(sigma : Simplify := 0);
        end if;
        s`SolvableDBAutomorphismGroup := AutomorphismGroup(Gamma);
      */
    end if;
  // (DO NOT) write the object to file
  /*
    ChangeDirectory(dbdirectory);
    SolvableDBWriteObject(s);
    returnText := Sprintf("SolvableDBObject file for %o written in directory %o\n", s`SolvableDBName, directory, d);
    ChangeDirectory(dbdirectory);
    return returnText;
  */
  return s;
end intrinsic;

intrinsic SolvableDBMerge(s::SolvableDBObject) -> SolvableDBObject, BoolElt
  {Given s, search the database for same name if there is none just returns s and writes s to file. If an object with the same name already appears in the database, then we check to see if the one in the database has the same PathToPP1. If both have the same PathToPP1, then we assume the one in the database has more information so we want to just take the one in the database, but first we check if s has nonconjugate triples (it should NOT!!). Lastly, if both have the same name but different PathToPP1, then we check PathNumber of the (obj in the database) and make the PathNumber of s that plus 1. Then update SolvableDBFilename, PathNumber, PathToPP1, Children, Parents, and write s to file. Also rewrite the ones with same SolvableDBName.}
  // directory stuff
  dir := GetCurrentDirectory();
  parentdir := Pipe(Sprintf("basename 'dirname %o'", dir), "");
  if parentdir ne "SolvableDessins\n" then
    error "make sure your working directory is /SolvableDessins";
  end if;
  assert assigned s`SolvableDBDegree;
  assert assigned s`SolvableDBFilename;
  d := s`SolvableDBDegree;
  filenames := SolvableDBFilenames(d);
  same := [* *];
  // get objs in database that have same "passport name"
  // but not necessarily same path to PP1
  for i := 1 to #filenames do
    t := SolvableDBAccessEntry(filenames[i]);
    if SolvableDBUnsolvableName(t) eq SolvableDBUnsolvableName(s) then
      Append(~same, t);
    end if;
  end for;
  // TODO always write down path number at end of filename!!!!!
  if #same eq 0 then // s is new and we just write it to file
    SolvableDBWriteObject(s);
    return s, true; // s is new
  else // compare with the existing database
    // check "isomorphic" BelyiMaps in database
    // and get the highest path number so far
    current_pathnumbers := [];
    for i := 1 to #same do
      Append(~current_pathnumbers, same[i]`SolvableDBPathNumber);
    end for;
    current_pathnumbers := SequenceToSet(current_pathnumbers);
    if #current_pathnumbers ne #same then
      error "current database is messed up with regards to PathNumbers!";
    end if;
    // now actually do things
    new_path_number := Max(current_pathnumbers)+1;
    for i := 1 to #same do
      t := same[i];
      if s`SolvableDBPathToPP1 eq t`SolvableDBPathToPP1 then
        // in this case, we have found a triple in the same Galois orbit
        // so just append it! :)
        /*
          for j := 1 to #s`SolvableDBGaloisOrbit do
            test_triple := s`SolvableDBGaloisOrbit[j];
            for k := 1 to #t`SolvableDBGaloisOrbit do
              if not IsConjugate(Sym(d), test_triple, t`SolvableDBGaloisOrbit[k]) then
                error Sprintf("%o, triple %o not conjugate to %o, triple %o. How could this happen?\n", s`SolvableDBName, j, t`SolvableDBFilename, k);
              end if;
            end for;
          end for;
          assert s`SolvableDBChildren subset t`SolvableDBChildren;
        */
        for triple in s`SolvableDBGaloisOrbit do
          Append(~t`SolvableDBGaloisOrbit, triple);
        end for;
        SolvableDBWriteObject(t);
        return t, false; // s is not new, but we appended new triples to Galois orbit above
      end if;
    end for;
    // since we made it out of the loop we know s is a new path to PP1
    // and we want to write s to the database and update it to have correct path number
    assert new_path_number ge 2;
    s`SolvableDBName := Sprintf("%o-path%o", SolvableDBUnsolvableName(s), new_path_number);
    s`SolvableDBFilename := Sprintf("%o-path%o.m", SolvableDBUnsolvableName(s), new_path_number);
    s`SolvableDBPathNumber := new_path_number;
    Remove(~s`SolvableDBPathToPP1, #s`SolvableDBPathToPP1);
    Append(~s`SolvableDBPathToPP1, Sprintf("%o-path%o", SolvableDBUnsolvableName(s), s`SolvableDBPathNumber));
    // TODO assertions before writing to file?
    SolvableDBWriteObject(s); // update s
    return s, true; // s is new
  end if;
end intrinsic;

intrinsic SolvableDBFilenames(d::RngIntElt) -> SeqEnum[MonStgElt]
  {Returns the filenames (MonStgElts) in SolvableDB/d as a SeqEnum. This assumes the current directory is SolvableDessins.}
  // directory stuff
  dir := GetCurrentDirectory();
  parentdir := Pipe(Sprintf("basename 'dirname %o'", dir), "");
  if parentdir ne "SolvableDessins\n" then
    error "make sure your working directory is /SolvableDessins";
  end if;
  directory := dir cat Sprintf("/SolvableDB/%o/", d);
  // get the filenames for some specified degree d
  ls := Pipe(Sprintf("ls %o", directory), "");
  filenames := Split(ls, "\n");
  return filenames;
end intrinsic;

intrinsic Child(s::SolvableDBObject) -> SolvableDBObject
  {}
  children := s`SolvableDBChildren;
  assert #children eq 1;
  return SolvableDBAccessEntry(children[1] cat ".m");
end intrinsic;

intrinsic Parent(s::SolvableDBObject, i::RngIntElt) -> SolvableDBObject
  {}
  parents := s`SolvableDBParents;
  assert i le #parents;
  return SolvableDBAccessEntry(parents[i] cat ".m");
end intrinsic;

intrinsic ParentName(s::SolvableDBObject, i::RngIntElt) -> MonStgElt
  {}
  parents := s`SolvableDBParents;
  assert i le #parents;
  t := SolvableDBAccessEntry(parents[i] cat ".m");
  return t`SolvableDBName;
end intrinsic;

intrinsic Parents(s::SolvableDBObject) -> SeqEnum[SolvableDBObject]
  {}
  parents := s`SolvableDBParents;
  parentss := [];
  for i := 1 to #parents do
    assert i le #parents;
    Append(~parentss, SolvableDBAccessEntry(parents[i] cat ".m"));
  end for;
  return parentss;
end intrinsic;

intrinsic ParentsNames(s::SolvableDBObject) -> SeqEnum[MonStgElt]
  {}
  parents := s`SolvableDBParents;
  names := [];
  for i := 1 to #parents do
    assert i le #parents;
    Append(~names, ParentName(s, i));
  end for;
  return names;
end intrinsic;

// TODO
intrinsic SolvableDBSanityCheck(s::SolvableDBObject) -> MonStgElt
  {}
end intrinsic;

// TODO add more sanity!
intrinsic SolvableDBStatusReport(d::RngIntElt) -> SeqEnum[SolvableDBObject], SeqEnum[SolvableDBObject]
  {}
  good := [];
  bad := [];
  unram := [];
  f := SolvableDBFilenames(d);
  for i := 1 to #f do
    s := SolvableDBAccessEntry(f[i]);
    vprintf Solvable : "%o (example %o of %o): ", s`SolvableDBName, i, #f;
    if assigned s`SolvableDBBelyiCurve then
      vprintf Solvable : "good.\n";
      Append(~good, s);
    else
      child := s`SolvableDBChildren;
      assert #child eq 1;
      child := SolvableDBAccessEntry(child[1] cat ".m");
      if SolvableIsUnramified(s) then
        vprintf Solvable : "unramified.\n";
        Append(~unram, s);
      elif SolvableIsUnramified(child) then
        vprintf Solvable : "child unramified.\n";
        Append(~unram, s);
      else
        vprintf Solvable : "bad.\n";
        Append(~bad, s);
      end if;
    end if;
  end for;
  vprintf Solvable : "d = %o:\n", d;
  vprintf Solvable : "  %o/%o computed\n", #good, #f;
  vprintf Solvable : "  %o/%o not computed\n", #bad, #f;
  vprintf Solvable : "  %o/%o unramified\n", #unram, #f;
  return good, bad, unram;
end intrinsic;
